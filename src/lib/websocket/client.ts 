// Import necessary dependencies
import { browser } from '$app/environment';

// Define the WebSocket connection options
interface WebSocketOptions {
    url: string;
    protocols?: string | string[];
}

// Create a function to setup the WebSocket connection
function setupWebSocket(options: WebSocketOptions): WebSocket {
    const { url, protocols } = options;

    // Ensure we're in a browser environment
    if (!browser) {
        throw new Error('WebSocket can only be used in a browser environment');
    }

    // Validate the URL
    if (!url || typeof url !== 'string') {
        throw new Error('Invalid WebSocket URL');
    }

    // Create and return the WebSocket instance
    return new WebSocket(url, protocols);
}

// Create a function to get the WebSocket URL
function getWebSocketUrl(): string {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = window.location.host; // This includes both hostname and port

    return `${protocol}//${host}`;
}

// Export a function to create a WebSocket connection
export function createWebSocketConnection(): WebSocket {
    const url = getWebSocketUrl();
    return setupWebSocket({ url });
}

// Usage example
try {
    const socket = createWebSocketConnection();

    socket.onopen = () => {
        console.log('WebSocket connection established');
    };

    socket.onmessage = (event) => {
        console.log('Received message:', event.data);
    };

    socket.onerror = (error) => {
        console.error('WebSocket error:', error);
    };

    socket.onclose = () => {
        console.log('WebSocket connection closed');
    };
} catch (error) {
    console.error('Failed to create WebSocket connection:', error);
}