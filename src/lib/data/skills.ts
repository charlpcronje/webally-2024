// src/lib/data/skills.ts

import Assets from './assets';
import type { Skill, SkillCategory } from '../types';
import { omit, type StringWithAutoComplete } from '@riadh-adrani/utils';

const defineSkillCategory = <S extends string>(data: SkillCategory<S>): SkillCategory<S> => data;

const categories = [
	defineSkillCategory({ name: 'Programming Languages', slug: 'pro-lang' }),
	defineSkillCategory({ name: 'Frameworks', slug: 'framework' }),
	defineSkillCategory({ name: 'Libraries', slug: 'library' }),
	defineSkillCategory({ name: 'Languages', slug: 'lang' }),
	defineSkillCategory({ name: 'Databases', slug: 'db' }),
	defineSkillCategory({ name: 'ORMs', slug: 'orm' }),
	defineSkillCategory({ name: 'DevOps', slug: 'devops' }),
	defineSkillCategory({ name: 'Testing', slug: 'test' }),
	defineSkillCategory({ name: 'Dev Tools', slug: 'devtools' }),
	defineSkillCategory({ name: 'Markup & Style', slug: 'markup-style' }),
	defineSkillCategory({ name: 'Design', slug: 'design' }),
	defineSkillCategory({ name: 'Soft Skills', slug: 'soft' }),
	defineSkillCategory({ name: 'Mobile Development', slug: 'mobile' }),
	defineSkillCategory({ name: 'Game Development', slug: 'game' }),
	defineSkillCategory({ name: 'AI & Machine Learning', slug: 'ai-ml' })
] as const;

const defineSkill = <S extends string>(
	skill: Omit<Skill<S>, 'category'> & {
		category?: StringWithAutoComplete<(typeof categories)[number]['slug']>;
	}
): Skill<S> => {
	const out: Skill<S> = omit(skill, 'category');

	if (skill.category) {
		out.category = categories.find((it) => it.slug === skill.category);
	}

	return out;
};

export const items = [
	defineSkill({
		slug: 'js',
		color: 'yellow',
		description: `JavaScript is a versatile, high-level programming language that has become the backbone of modern web development. 
		Originally created by Brendan Eich in 1995, JavaScript has evolved from a simple scripting language for web browsers to a powerful tool for both front-end and back-end development.
		Its ability to run on the client-side allows for dynamic, interactive web pages that can update content without requiring a page reload. 
		
		JavaScript's syntax is influenced by Java, but it uses prototype- based object - orientation, making it more flexible than class- based object - oriented languages.With the advent of Node.js, JavaScript has also become a popular choice for server - side programming, enabling developers to use a single language across the entire web stack.JavaScript\'s ecosystem is vast, with numerous libraries and frameworks like React, Angular, and Vue.js enhancing its capabilities for building complex web applications. The language continues to evolve through ECMAScript specifications, introducing new features and improvements regularly. JavaScript\'s asynchronous programming model, with features like Promises and async / await, makes it well - suited for handling I / O operations and API calls efficiently.Its widespread adoption and the constant innovation in its ecosystem make JavaScript an essential skill for any web developer.`,
		logo: Assets.JavaScript,
		name: 'JavaScript',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'ts',
		color: 'blue',
		description: 'TypeScript is a statically typed superset of JavaScript that adds optional types, classes, and modules to the language. Developed and maintained by Microsoft, TypeScript was designed to address the challenges of building large-scale applications with JavaScript. It compiles to clean, readable JavaScript code that runs on any browser, host, or operating system. TypeScript introduces several features that enhance developer productivity and code quality. The static typing system helps catch errors early in the development process, providing better tooling support with features like auto-completion, refactoring, and intelligent code navigation. TypeScript\'s type inference capabilities allow developers to benefit from static typing without the need to explicitly declare types for every variable.The language also supports object- oriented programming concepts like interfaces, generics, and decorators, making it easier to build and maintain complex applications.TypeScript is fully compatible with existing JavaScript code, allowing for gradual adoption in existing projects.Its ability to use declaration files(.d.ts) enables developers to add type information to existing JavaScript libraries, improving the development experience when working with third - party code.As the complexity of web applications continues to grow, TypeScript has become increasingly popular in enterprise environments and for large - scale projects, offering a more robust and maintainable alternative to plain JavaScript.',
		logo: Assets.TypeScript,
		name: 'TypeScript',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'php',
		color: 'purple',
		description: 'PHP (Hypertext Preprocessor) is a widely-used, open-source server-side scripting language particularly suited for web development. Created by Rasmus Lerdorf in 1994, PHP has evolved into a powerful tool for building dynamic web pages and applications. PHP\'s syntax draws elements from C, Java, and Perl, making it relatively easy for developers with experience in these languages to pick up.One of PHP\'s key strengths is its deep integration with web servers and databases, particularly MySQL. This integration allows for efficient processing of form data, file operations, and database interactions. PHP supports both procedural and object-oriented programming paradigms, offering flexibility in coding styles. The language comes with a vast standard library and has an extensive ecosystem of frameworks and libraries, such as Laravel, Symfony, and CodeIgniter, which provide robust tools for building complex web applications. PHP\'s ability to be embedded directly into HTML makes it particularly convenient for creating dynamic web content.Over the years, PHP has made significant improvements in performance, especially with the introduction of PHP 7 and later versions, which brought substantial speed enhancements and reduced memory usage.While PHP has faced criticism for inconsistencies in its core API and some security concerns in older versions, its continued development and the strength of its community have addressed many of these issues.PHP powers many popular content management systems like WordPress, Drupal, and Joomla, making it a crucial technology in the web development landscape.',
		logo: Assets.PHP,
		name: 'PHP',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'python',
		color: 'blue',
		description: 'Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility. Created by Guido van Rossum and first released in 1991, Python has grown to become one of the most popular programming languages in the world. Its design philosophy emphasizes code readability with its notable use of significant whitespace, making it an excellent language for beginners while still being powerful enough for advanced users and enterprise applications. Python supports multiple programming paradigms, including procedural, object-oriented, and functional programming. One of Python\'s greatest strengths is its extensive standard library, which provides tools suited to many tasks, reducing the need for external libraries in many projects.The language\'s "batteries included" philosophy means that complex functionalities often require just a single line of code to implement. Python\'s simplicity and efficiency have made it a favorite in scientific computing, data analysis, artificial intelligence, and machine learning, with libraries like NumPy, Pandas, and TensorFlow being widely used in these fields.Web development frameworks like Django and Flask have also made Python a popular choice for backend web development.Python\'s interpreter nature and dynamic typing allow for rapid development and prototyping, making it well-suited for scripting and automation tasks. The language\'s cross- platform compatibility ensures that Python code can run on various operating systems with minimal modifications.With its large and active community, extensive documentation, and continuous development, Python remains at the forefront of modern programming languages, adapting to new technological trends and maintaining its relevance across various domains of software development.',
		logo: Assets.Python,
		name: 'Python',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'java',
		color: 'red',
		description: 'Java is a versatile, object-oriented programming language designed to be "write once, run anywhere" (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Developed by James Gosling at Sun Microsystems (now owned by Oracle Corporation) and released in 1995, Java has become one of the most popular programming languages for building enterprise-scale applications. Java\'s syntax is similar to C and C++, but it eliminates certain low - level constructs such as pointers and has a simpler object model.The language is strongly typed and compiled to bytecode, which runs on a Java Virtual Machine(JVM), providing platform independence.Java\'s robust standard library, known as the Java Class Library, provides a wide range of utilities for tasks such as networking, data structures, and graphical user interface (GUI) development. The language\'s "garbage collection" feature automatically manages memory allocation and deallocation, reducing the likelihood of memory leaks and other common programming errors.Java\'s "Write Once, Run Anywhere" capability, along with its strong emphasis on security, has made it a preferred choice for developing large-scale, distributed systems, particularly in enterprise environments. The platform includes Java SE (Standard Edition) for desktop and server environments, Java EE (Enterprise Edition) for large-scale, multi-tiered, scalable, and secure network applications, and Java ME (Micro Edition) for mobile and embedded devices. Java has also been widely used in Android app development, further extending its reach. With its long-standing presence in the industry, extensive ecosystem of tools and frameworks, and continued evolution through regular releases, Java remains a cornerstone of modern software development, particularly in areas requiring scalability, security, and cross-platform compatibility.',
		logo: Assets.Java,
		name: 'Java',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'kotlin',
		color: 'orange',
		description: 'Kotlin is a modern, statically typed programming language developed by JetBrains. First appearing in 2011 and reaching version 1.0 in 2016, Kotlin was designed to be fully interoperable with Java while addressing many of Java\'s perceived shortcomings.Kotlin compiles to Java bytecode and runs on the Java Virtual Machine(JVM), allowing it to be used anywhere Java is used, including Android development, server- side applications, and more.One of Kotlin\'s primary goals is to enhance developer productivity and code safety. It achieves this through a more concise and expressive syntax compared to Java, reducing boilerplate code and making programs easier to read and write. Kotlin introduces several features that Java lacks, such as null safety, data classes, and extension functions. The language\'s null safety feature helps prevent null pointer exceptions, a common source of errors in Java programs, by distinguishing between nullable and non - nullable types at the compiler level.Kotlin supports both object - oriented and functional programming paradigms, offering features like higher - order functions, lambda expressions, and operator overloading.Its smart cast feature automatically casts types in many cases, reducing the need for explicit type checking.In 2017, Google announced first - class support for Kotlin on Android, further boosting its popularity among mobile developers.Kotlin\'s coroutines feature provides a way to write asynchronous, non-blocking code in a sequential manner, making it easier to handle concurrency. The language\'s multiplatform capabilities allow developers to share code between JVM, JavaScript, and native applications.With its modern features, Java interoperability, and growing ecosystem, Kotlin has rapidly gained adoption in various domains of software development, offering a more enjoyable and productive alternative to Java while leveraging existing Java libraries and frameworks.',
		logo: Assets.Kotlin,
		name: 'Kotlin',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'csharp',
		color: 'green',
		description: 'C# (pronounced "C-sharp") is a modern, multi-paradigm programming language developed by Microsoft as part of its .NET framework. First released in 2002, C# was designed by Anders Hejlsberg with the goal of combining the computing power of C++ with the programming ease of Visual Basic. C# is a strongly typed, object-oriented language that supports various programming paradigms including imperative, declarative, functional, generic, and component-oriented programming. It draws significant inspiration from Java and C++, but introduces several innovative features that set it apart. C# is designed for developing applications that run on the .NET Framework or .NET Core, making it particularly well-suited for Windows desktop applications, web applications (using ASP.NET), and games (using Unity game engine). The language\'s tight integration with the.NET ecosystem provides access to a vast library of pre- built functions and APIs, enhancing developer productivity.C# includes features such as properties, delegates, events, and LINQ(Language Integrated Query), which simplify common programming tasks.Its garbage collection mechanism automatically manages memory, reducing the risk of memory leaks.C# has evolved significantly since its inception, with each new version introducing features that enhance its capabilities and ease of use.Recent versions have added features like nullable reference types, pattern matching, and asynchronous streams, keeping the language modern and relevant.The introduction of.NET Core(now.NET 5 and beyond) has made C# more versatile, allowing developers to build cross - platform applications that can run on Windows, macOS, and Linux.C#\'s use extends beyond traditional software development; it\'s widely used in game development with the Unity engine, and in combination with the.NET framework, it\'s a popular choice for enterprise-level applications. With Microsoft\'s continued investment and a large, active community, C# remains at the forefront of programming languages, particularly in the Microsoft ecosystem and beyond.',
		logo: Assets.Csharp,
		name: 'C#',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'cpp',
		color: 'blue',
		description: 'C++ is a powerful, general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language. First released in 1985, C++ has evolved to become one of the most influential and widely used programming languages in the world. It combines the low-level control and efficiency of C with high-level features for programming flexibility and software development productivity. C++ is known for its performance, efficiency, and close-to-the-hardware programming capabilities, making it a popular choice for system software, application software, device drivers, embedded software, and video games. The language supports multiple programming paradigms, including procedural, object-oriented, functional, and generic programming. C++\'s object- oriented features, such as classes, inheritance, and polymorphism, allow for the creation of well - structured and maintainable code.The language\'s template feature enables generic programming, allowing developers to write code that works with any data type. C++ has undergone significant evolution over the years, with major revisions (like C++11, C++14, C++17, and C++20) introducing new features and improvements. These updates have added features like lambda expressions, smart pointers, move semantics, and concepts, enhancing the language\'s expressiveness and safety while maintaining its performance characteristics.The Standard Template Library(STL) provides a collection of powerful, reusable components for common data structures and algorithms, significantly boosting productivity.C++\'s ability to directly manipulate hardware and memory makes it suitable for performance-critical applications, such as game engines, financial systems, and scientific simulations. However, this low-level control also requires careful management to avoid issues like buffer overflows and memory leaks. Despite the rise of higher-level languages, C++ remains crucial in many domains due to its performance, flexibility, and extensive legacy codebase. Its continued evolution and the introduction of modern features ensure that C++ stays relevant in contemporary software development, particularly in areas where performance and hardware control are paramount.',
		logo: Assets.Cpp,
		name: 'C++',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'html',
		color: 'orange',
		description: 'HTML (Hypertext Markup Language) is the standard markup language used for creating web pages and web applications. First developed by Tim Berners-Lee in 1990, HTML has been the backbone of the World Wide Web since its inception. HTML uses a system of elements and attributes to define the structure and content of web pages, allowing browsers to interpret and display the information correctly. The language has evolved significantly over the years, with HTML5 being the latest major version, introducing more semantic elements and support for multimedia without the need for plugins. HTML documents are composed of a tree-like structure of elements, each represented by tags. These elements can include text, images, videos, forms, and links, among others. The language works in conjunction with CSS (Cascading Style Sheets) for styling and JavaScript for dynamic behavior, forming the triad of core technologies for the World Wide Web. HTML5 introduced new structural elements like <header>, <nav>, <article>, and <footer>, which provide more meaningful ways to structure content. It also added support for audio and video elements, canvas for 2D drawing, and improved form controls. The language\'s simplicity and flexibility have contributed to its widespread adoption, making it an essential skill for web developers, content creators, and even marketers. HTML\'s role in search engine optimization (SEO) is crucial, as proper use of semantic elements and attributes can significantly impact a website\'s visibility in search results. The language\'s accessibility features, such as ARIA (Accessible Rich Internet Applications) attributes, enable the creation of web content that is more inclusive and usable by people with disabilities. HTML\'s declarative nature makes it relatively easy to learn, yet it offers enough depth to support complex web applications when combined with other technologies. As the web continues to evolve, HTML adapts to new requirements, with ongoing discussions and proposals for future versions aimed at addressing emerging needs in web development. Understanding HTML is fundamental not just for web development, but also for related fields such as email marketing, content management systems, and even some aspects of mobile app development, making it a versatile and enduring technology in the digital landscape.',
		logo: Assets.HTML,
		name: 'HTML',
		category: 'markup-style'
	}),
	defineSkill({
		slug: 'css',
		color: 'blue',
		description: 'CSS (Cascading Style Sheets) is a style sheet language used for describing the presentation of a document written in HTML or XML. Developed by Håkon Wium Lie and Bert Bos, and first proposed in 1994, CSS has become an essential technology in web design and development. CSS separates the presentation and layout from the content of web pages, allowing developers to control the look and feel of multiple web pages all at once. This separation of concerns enhances maintainability, improves accessibility, and provides greater flexibility in web design. CSS works by selecting HTML elements and applying styles to them. These styles can include properties for color, font, sizing, spacing, positioning, and much more. The "cascading" in CSS refers to the way styles can be inherited and overridden, with styles defined later in a stylesheet or with higher specificity taking precedence. CSS3, the latest major version, introduced numerous new features including animations, transitions, rounded corners, gradients, and flexible box layout (flexbox). These advancements have significantly reduced the need for images and JavaScript in creating dynamic and responsive designs. Responsive web design, a crucial aspect of modern web development, is largely achieved through CSS media queries, which allow different styles to be applied based on the device\'s characteristics, such as screen size. CSS preprocessors like Sass and Less extend CSS with variables, nested rules, mixins, and functions, enhancing its power and making stylesheets more maintainable. CSS frameworks such as Bootstrap and Foundation provide pre-written CSS files that can be used to quickly develop responsive and consistent web designs. The ongoing development of CSS includes new layout models like CSS Grid, which offers a two-dimensional layout system, and new features are continually proposed and implemented to address evolving web design needs. Mastery of CSS is essential for creating visually appealing, responsive, and accessible web interfaces, making it a fundamental skill for web designers and front-end developers.',
		logo: Assets.CSS,
		name: 'CSS',
		category: 'markup-style'
	}),
	defineSkill({
		slug: 'sass',
		color: 'pink',
		description: 'Sass (Syntactically Awesome Style Sheets) is a powerful CSS preprocessor that extends the capabilities of standard CSS. Created by Hampton Catlin and developed by Natalie Weizenbaum in 2006, Sass introduces programming-like features to CSS, making stylesheets more maintainable, thematic, and extendable. Sass files are compiled into standard CSS files, which can then be used in web projects. The language comes in two syntaxes: the original indented syntax (Sass) and the more widely used SCSS (Sassy CSS) syntax, which is a superset of CSS3 syntax. Sass introduces variables, allowing developers to store information like colors, font stacks, or any CSS value to reuse throughout the stylesheet. This feature significantly reduces repetition and makes large stylesheets more manageable. Nesting is another key feature of Sass, allowing selectors to be nested inside one another, mirroring the HTML structure and making the stylesheet more readable. Sass supports partials, which are smaller Sass files that can be imported into other Sass files, promoting modularity and organization in large projects. The @import directive in Sass is more powerful than its CSS counterpart, allowing imports without additional HTTP requests. Mixins in Sass enable the reuse of whole chunks of CSS, accepting arguments for even more flexibility. The language also includes powerful operations and built-in functions for color manipulation, mathematics, and more. Control directives like @if, @for, @each, and @while bring programming-like logic to stylesheets, enabling complex operations and dynamic style generation. Sass\'s extend/inheritance feature allows sharing of CSS properties from one selector to another, reducing code duplication. With its ability to create cleaner, more organized, and more maintainable stylesheets, Sass has become an indispensable tool for many front-end developers, particularly in large-scale web projects where CSS management can become complex.',
		logo: Assets.Sass,
		name: 'Sass',
		category: 'markup-style'
	}),
	defineSkill({
		slug: 'react',
		color: 'cyan',
		description: 'React is an open-source JavaScript library for building user interfaces, primarily for single-page applications. Developed and maintained by Facebook (now Meta) and a community of individual developers and companies, React was first released in 2013 and has since become one of the most popular front-end libraries in web development. React\'s core philosophy is to make it painless to create interactive UIs by using a component-based architecture. Components are the building blocks of React applications, encapsulating both the structure (typically written in JSX, a syntax extension for JavaScript) and behavior of a part of the UI. This modular approach promotes code reusability and makes applications easier to develop and maintain. One of React\'s key features is the virtual DOM (Document Object Model), which is a lightweight copy of the actual DOM. React uses this to optimize rendering performance by minimizing direct manipulation of the DOM, which can be computationally expensive. When state changes occur, React first updates the virtual DOM, compares it with the previous version, and then efficiently updates only the parts of the actual DOM that have changed. React\'s unidirectional data flow, often referred to as one-way binding, makes it easier to track and debug how data changes affect the application state. This model, combined with the concept of state and props, provides a clear and predictable way to manage data within an application. The library\'s ecosystem is vast and continually growing, with tools like Create React App simplifying project setup, and state management solutions like Redux and MobX addressing complex state management needs. React Native, an offshoot of React, allows developers to create native mobile applications using React principles, further extending the library\'s reach. React\'s declarative nature, where developers describe what they want the UI to look like rather than imperatively defining each step to get there, leads to more predictable and easier to debug code. With its strong community support, extensive documentation, and backing from major tech companies, React continues to evolve and maintain its position as a leading technology in modern web development.',
		logo: Assets.ReactJs,
		name: 'React',
		category: 'library'
	}),
	defineSkill({
		slug: 'vue',
		color: 'green',
		description: 'Vue.js is a progressive JavaScript framework for building user interfaces. Created by Evan You and first released in 2014, Vue has gained significant popularity due to its approachable learning curve and powerful features. Vue is designed to be incrementally adoptable, allowing developers to start using it for small parts of an application and gradually expand its usage as needed. This flexibility makes Vue suitable for a wide range of projects, from enhancing static HTML pages to powering sophisticated single-page applications. At its core, Vue uses a template syntax that extends HTML with directives, allowing for dynamic rendering of data to the DOM. Vue\'s reactivity system efficiently updates the DOM when the underlying data changes, providing a smooth and responsive user experience. The framework is component-based, allowing developers to build encapsulated, reusable UI elements. Vue components can be single-file components, containing template, script, and style in one .vue file, which promotes organization and maintainability. Vue\'s official tooling, like the Vue CLI, provides a full system for rapid Vue.js development, including a plugin-based architecture for easy integration of additional features. Vue\'s core library focuses on the view layer, but the Vue ecosystem includes official libraries for routing (vue-router) and state management (Vuex), allowing developers to build complex applications with a consistent architecture. The framework\'s performance is notable, with a small footprint and fast rendering capabilities. Vue 3, the latest major version, introduced the Composition API, offering a more flexible way to organize component logic, especially in larger applications. It also brought performance improvements and better TypeScript support. Vue\'s gentle learning curve, combined with its scalability and performance, has led to its adoption by many companies and developers worldwide. The framework\'s active community and comprehensive documentation further contribute to its popularity and ease of use. Whether used for small interactive elements or full-scale applications, Vue.js provides a robust and enjoyable development experience for building modern web interfaces.',
		logo: Assets.VueJs,
		name: 'Vue.js',
		category: 'framework'
	}),
	defineSkill({
		slug: 'angular',
		color: 'red',
		description: 'Angular is a comprehensive, open-source web application framework maintained by Google and a community of individual developers and corporations. First released in 2010 as AngularJS, it was completely rewritten and released as Angular 2 in 2016, with subsequent versions following a semantic versioning scheme. Angular provides a component-based framework for building scalable web applications, combined with a collection of well-integrated libraries that cover a wide variety of features, including routing, forms management, client-server communication, and more. Angular uses TypeScript as its primary language, which adds static typing, classes, and modules to JavaScript, enhancing code quality and maintainability. The framework\'s architecture is based on components, services, and modules. Components define views, which are sets of screen elements that Angular can choose among and modify according to your program logic and data. Services provide specific functionality not directly related to views, and modules help organize an application into cohesive blocks of functionality. Angular\'s powerful template syntax extends HTML with features like data binding, event handling, and structural directives, allowing for dynamic and interactive user interfaces. The framework includes a powerful dependency injection system, which increases the efficiency and modularity of applications. Angular\'s CLI (Command Line Interface) simplifies the development process by providing commands for generating components, services, and other artifacts, as well as for building, testing, and deploying applications. The framework also includes robust testing utilities, making it easier to write and run unit and integration tests. Angular\'s performance optimization features, such as Ahead-of-Time compilation and tree-shaking, result in faster loading and better runtime performance. With its comprehensive nature, Angular is particularly well-suited for large-scale, complex applications, especially in enterprise environments. While it has a steeper learning curve compared to some other frameworks, Angular\'s structure and conventions promote consistency across projects and teams. Regular updates and long-term support versions ensure that Angular remains modern and reliable for large-scale application development.',
		logo: Assets.Angular,
		name: 'Angular',
		category: 'framework'
	}),
	defineSkill({
		slug: 'svelte',
		color: 'orange',
		description: 'Svelte is a modern JavaScript framework for building user interfaces, created by Rich Harris in 2016. Unlike traditional frameworks that do the bulk of their work in the browser, Svelte shifts that work into a compile step that happens when you build your app. The result is highly efficient, lightweight applications with excellent runtime performance. Svelte\'s approach is to compile your code to vanilla JavaScript at build time, effectively disappearing at runtime, which leads to smaller bundle sizes and faster initial page loads compared to other frameworks. One of Svelte\'s key features is its simplicity and ease of use. It uses a component-based architecture, where each component is written in a .svelte file that contains HTML, CSS, and JavaScript together. This structure promotes a clear separation of concerns while keeping related code close together. Svelte\'s syntax is designed to be familiar to web developers, with minimal new concepts to learn. The framework provides reactive declarations, which automatically update the DOM when the underlying data changes, without the need for a virtual DOM. This approach not only simplifies the mental model for developers but also contributes to Svelte\'s performance advantages. Svelte includes built-in state management capabilities, eliminating the need for additional libraries in many cases. It also provides an animation and transition system out of the box, making it easy to create smooth, engaging user interfaces. The framework\'s compiler generates highly optimized JavaScript, often resulting in smaller bundle sizes compared to other frameworks. This is particularly beneficial for performance-sensitive applications or those targeting low-powered devices. Svelte\'s ecosystem includes SvelteKit, an application framework that provides server-side rendering, routing, and other features needed for building full-fledged web applications. While Svelte is newer and has a smaller community compared to some other frameworks, it has been gaining popularity rapidly due to its performance benefits and developer-friendly approach. Its innovative compile-time approach and focus on simplicity make Svelte an attractive option for developers looking to build fast, efficient web applications with less boilerplate code.',
		logo: Assets.Svelte,
		name: 'Svelte',
		category: 'framework'
	}),
	defineSkill({
		slug: 'nodejs',
		color: 'green',
		description: 'Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a web browser. Created by Ryan Dahl in 2009, Node.js enables developers to use JavaScript for server-side scripting, allowing for the development of scalable network applications. Built on Chrome\'s V8 JavaScript engine, Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices. One of Node.js\'s key features is its vast ecosystem of open-source libraries available through npm (Node Package Manager), which is the largest ecosystem of open source libraries in the world. This extensive collection of modules allows developers to quickly add functionality to their applications without having to build everything from scratch. Node.js\'s architecture makes it particularly well-suited for building real-time, push-based applications like chat applications, streaming services, and collaborative tools. Its single-threaded event loop can handle a large number of simultaneous connections with high throughput, making it an excellent choice for building scalable network applications. The platform\'s ability to handle asynchronous operations efficiently is one of its major strengths, allowing for non-blocking execution of code. This is particularly useful for I/O-heavy applications, as it allows the server to continue processing other requests while waiting for I/O operations to complete. Node.js has found wide adoption in various types of applications, from web servers and RESTful APIs to microservices and serverless functions. It\'s used by many large companies including Netflix, LinkedIn, and NASA, demonstrating its capability to handle enterprise-level applications. The Node.js ecosystem includes frameworks like Express.js, which simplify the process of building web applications and APIs. Tools like pm2 and Forever enable process management and ensure that Node.js applications can run continuously. With its performance, scalability, and the ability to use JavaScript across the full stack, Node.js has become a cornerstone of modern web development, enabling developers to build fast, scalable network applications efficiently.',
		logo: Assets.NodeJs,
		name: 'Node.js',
		category: 'framework'
	}),
	defineSkill({
		slug: 'express',
		color: 'gray',
		description: 'Express.js, often simply called Express, is a minimal and flexible web application framework for Node.js. Created by TJ Holowaychuk and first released in 2010, Express has become one of the most popular web frameworks for Node.js, known for its simplicity, flexibility, and robust set of features for web and mobile applications. Express provides a thin layer of fundamental web application features without obscuring Node.js features, giving developers the freedom to structure their applications as they see fit. At its core, Express is a routing and middleware framework that sits on top of Node.js\'s built-in http module. It simplifies the process of handling HTTP requests and responses, making it easier to create robust APIs and web applications. The middleware concept in Express allows for a series of functions to be executed in the middle of the request-response cycle, each with access to the request object, response object, and the next middleware function. This feature enables developers to add functionality like logging, parsing request bodies, handling sessions, and more. Express\'s routing system allows developers to define routes for different HTTP methods (GET, POST, PUT, DELETE, etc.) and URLs, making it straightforward to create RESTful APIs. The framework also supports template engines, allowing for easy generation of HTML markup. While Express itself is minimalist, its extensive ecosystem of middleware and plugins allows developers to add a wide range of functionality to their applications. Popular middleware packages include body-parser for parsing incoming request bodies, morgan for logging, and cors for handling Cross-Origin Resource Sharing. Express integrates well with various databases and ORMs, making it suitable for building full-stack applications. It\'s often used as part of the MEAN (MongoDB, Express, Angular, Node.js) or MERN (MongoDB, Express, React, Node.js) stack. The framework\'s simplicity and flexibility make it an excellent choice for both beginners and experienced developers. It can be used to build everything from simple single-page applications to complex enterprise-level applications. Express\'s extensive documentation, large community, and abundance of learning resources contribute to its popularity and ease of adoption. As a testament to its robustness and scalability, Express is used by many large companies including IBM, Uber, and Accenture. Its continued development and wide adoption ensure that Express remains a relevant and powerful tool in the Node.js ecosystem.',
		logo: Assets.ExpressJs,
		name: 'Express.js',
		category: 'framework'
	}),
	defineSkill({
		slug: 'laravel',
		color: 'red',
		description: 'Laravel is a free, open-source PHP web framework created by Taylor Otwell and intended for the development of web applications following the model–view–controller (MVC) architectural pattern. First released in June 2011, Laravel has quickly become one of the most popular PHP frameworks due to its elegant syntax, robust features, and developer-friendly tools. Laravel aims to make the development process a pleasing one for the developer without sacrificing application functionality. It achieves this through a combination of expressive, beautiful syntax and a rich set of features that cover most common tasks in modern web development. One of Laravel\'s key strengths is its extensive ecosystem. The framework comes with a powerful command-line interface called Artisan, which can be used to generate boilerplate code, run database migrations, and manage various aspects of the application. Laravel also includes Eloquent, an advanced ORM (Object-Relational Mapping) that makes database interactions intuitive and efficient. The framework\'s templating engine, Blade, provides a clean, simple way to create views, with features like template inheritance and sections. Laravel includes built-in authentication and authorization systems, making it easy to implement user registration, login, and access control. The framework also provides robust queuing services for deferred job processing, event broadcasting for real-time applications, and task scheduling for recurring jobs. Laravel\'s service container is a powerful tool for managing class dependencies and performing dependency injection. The framework also includes Facades, which provide a static interface to classes that are available in the application\'s service container. For testing, Laravel provides PHPUnit out of the box and offers convenient helper methods to make testing applications easier. The framework\'s emphasis on security is evident in its built-in protection against common web vulnerabilities like cross-site scripting (XSS), SQL injection, and CSRF (Cross-Site Request Forgery). Laravel\'s package manager, Composer, allows for easy integration of third-party libraries. The framework also has official packages like Passport for API authentication, Socialite for social login, and Horizon for queue monitoring. With its combination of developer-friendly features, robust architecture, and active community, Laravel has established itself as a go-to framework for building modern, scalable web applications in PHP.',
		logo: Assets.Laravel,
		name: 'Laravel',
		category: 'framework'
	}),
	defineSkill({
		slug: 'symfony',
		color: 'black',
		description: 'Symfony is a leading PHP web application framework and a set of reusable PHP components/libraries. Created by Fabien Potencier in 2005, Symfony has grown to become one of the most respected and widely used frameworks in the PHP ecosystem. It\'s known for its robustness, flexibility, and high performance, making it a popular choice for large-scale enterprise applications as well as smaller projects. Symfony follows the MVC (Model-View-Controller) architectural pattern and is designed to optimize the development of web applications by providing a structured, reusable code base. One of Symfony\'s key philosophies is the idea of "don\'t repeat yourself" (DRY), which it achieves through a comprehensive set of reusable components. These components can be used independently in any PHP project, not just those built on the full Symfony framework. This modular approach allows developers to use only the parts they need, promoting flexibility and efficiency. Symfony is built with performance in mind, featuring a powerful dependency injection container and an event dispatcher, which contribute to its speed and efficiency. The framework also includes a profiler tool that helps developers identify and resolve performance bottlenecks. Symfony\'s console component provides a robust command-line interface for automating tasks and generating boilerplate code. The framework\'s form component simplifies the process of creating and processing HTML forms, while its security component provides tools for handling authentication, authorization, and protection against common web vulnerabilities. For database operations, Symfony integrates seamlessly with Doctrine, a powerful ORM (Object-Relational Mapper) and DBAL (Database Abstraction Layer). This integration simplifies database interactions and supports multiple database systems. Symfony\'s templating engine, Twig, offers a clean and extensible syntax for creating views. The framework also includes a powerful routing system that maps URLs to controllers. One of Symfony\'s strengths is its emphasis on following PHP best practices and design patterns. It encourages the use of PSR (PHP Standards Recommendations) standards, promoting code that is not only functional but also clean and maintainable. The framework has a strong focus on testing, providing tools and best practices for unit and functional testing. Symfony\'s extensive documentation, active community, and regular release cycle (with long-term support versions) make it a reliable choice for long-term projects. Many popular PHP projects, including Drupal, phpBB, and Laravel, use Symfony components, testament to the framework\'s quality and versatility. With its robust architecture, extensive feature set, and commitment to PHP best practices, Symfony continues to be a cornerstone of professional PHP development.',
		logo: Assets.Symfony,
		name: 'Symfony',
		category: 'framework'
	}),
	defineSkill({
		slug: 'django',
		color: 'green',
		description: 'Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Created in 2003 by Adrian Holovaty and Simon Willison, and publicly released in 2005, Django has become one of the most popular web frameworks for Python. It follows the model-template-view (MTV) architectural pattern, which is similar to the model-view-controller (MVC) pattern used in other frameworks. Django\'s primary goal is to ease the creation of complex, database-driven websites by emphasizing reusability and "pluggability" of components, less code, low coupling, rapid development, and the principle of don\'t repeat yourself (DRY). One of Django\'s key features is its automatic admin interface, which reads metadata from your models to provide a powerful and production-ready interface for managing content on your site. This admin interface is highly customizable and can save significant development time. Django includes a robust object-relational mapper (ORM) that supports a wide range of database backends. The ORM allows developers to interact with databases using Python code instead of writing SQL queries directly, enhancing productivity and portability across different database systems. Security is a top priority in Django. The framework includes protection against many common security issues such as cross-site scripting (XSS), cross-site request forgery (CSRF), SQL injection, and clickjacking. It also provides a user authentication system that handles user accounts, groups, permissions, and cookie-based user sessions. Django\'s URL dispatcher uses elegant URL design, allowing developers to design clean, SEO-friendly URLs without framework-specific limitations. The framework\'s template engine is powerful yet maintains a clear separation between design, content, and Python code, promoting the DRY principle. For handling forms, Django provides a form library that manages rendering forms as HTML, validating user-submitted data, and converting that data to native Python types. Django also includes a caching framework, which interfaces with memcached or other cache backends, and a syndication framework for generating RSS and Atom feeds. The framework\'s "batteries included" philosophy means it comes with many extras you commonly need, including a lightweight web server for development and testing, and tools for generating Google Sitemaps. Django has excellent documentation and a large, supportive community, which contributes to its ease of learning and use. It\'s used by many large organizations including Mozilla, Instagram, and NASA, demonstrating its scalability and robustness. With its comprehensive feature set, strong security defaults, and focus on rapid development, Django remains a top choice for developers building everything from content management systems to social networking sites and scientific computing platforms.',
		logo: Assets.Django,
		name: 'Django',
		category: 'framework'
	}),
	defineSkill({
		slug: 'flask',
		color: 'black',
		description: 'Flask is a lightweight WSGI web application framework written in Python. Created by Armin Ronacher in 2010, Flask is designed to be simple and easy to use, making it an excellent choice for small to medium-sized web applications and microservices. Often referred to as a "micro" framework, Flask aims to keep the core simple but extensible, allowing developers to add the features they need without imposing a specific structure or dependencies. Unlike more comprehensive frameworks, Flask doesn\'t include an ORM (Object-Relational Mapper) or form validation out of the box. Instead, it allows developers to choose and integrate the tools that best fit their specific needs. This flexibility is one of Flask\'s key strengths, as it enables developers to have more control over their application\'s architecture and dependencies. Despite its minimalist core, Flask includes several essential features for web development. It comes with a built-in development server and debugger, integrated unit testing support, RESTful request dispatching, and Jinja2 templating engine. Flask uses Werkzeug, a comprehensive WSGI web application library, and Jinja2, which together handle much of the backend heavy lifting. One of Flask\'s notable features is its use of decorators to bind functions to URLs, making route definitions clean and intuitive. Flask\'s simplicity makes it an excellent choice for beginners learning web development, as well as for experienced developers who want to quickly prototype ideas or build small to medium-sized applications. The framework\'s documentation is comprehensive and includes many examples, further contributing to its ease of use. Flask\'s extensibility is another key feature. A wide range of extensions are available that add functionality such as form validation, upload handling, various authentication technologies, and more. This allows developers to add complex functionality to their applications while keeping the core simple. Flask is well-suited for building RESTful APIs and microservices. Its lightweight nature and flexibility make it easy to create small, focused services that can be part of a larger, distributed system. The framework is also popular in the data science community, often used to create web interfaces for machine learning models and data visualization tools. While Flask doesn\'t impose a specific project structure, it\'s flexible enough to support various architectural patterns, including MVC (Model-View-Controller). This flexibility allows Flask to scale with the complexity of the project, from simple single-file applications to large, complex systems. Flask has been adopted by many companies and organizations, including LinkedIn, Netflix, and Mozilla, demonstrating its capability to handle production-level applications. Its combination of simplicity, flexibility, and a strong ecosystem of extensions makes Flask a versatile and powerful tool for Python web development.',
		logo: Assets.Flask,
		name: 'Flask',
		category: 'framework'
	}),
	defineSkill({
		slug: 'mongodb',
		color: 'green',
		description: 'MongoDB is a popular, open-source document-oriented database program classified as a NoSQL database. Developed by MongoDB Inc., it was first released in 2009 and has since become one of the most widely used databases for modern applications. MongoDB stores data in flexible, JSON-like documents called BSON (Binary JSON), which allows for varying structure of data between documents. This schema-less nature makes MongoDB particularly well-suited for applications where data structures may evolve over time or where the structure of the data is not known in advance. One of MongoDB\'s key features is its support for dynamic queries. The database allows for querying on any field in a document, regardless of how deeply nested it may be, and supports a rich query language for complex queries. MongoDB provides high availability through its replica set feature, which is a group of MongoDB processes that maintain the same data set. Replica sets provide automatic failover and data redundancy, enhancing the database\'s fault tolerance. For scalability, MongoDB offers horizontal scaling through sharding. This allows the database to distribute data across multiple machines, enabling it to handle large amounts of data and high-throughput operations. MongoDB includes a powerful aggregation framework for data analysis and transformation. This feature allows for complex operations on data, including grouping, filtering, and computing aggregate values. The database also supports geospatial indexing, allowing for location-based queries, which is particularly useful for applications that deal with geographic data. MongoDB\'s flexible document model makes it well-suited for a wide range of applications, from content management systems and real-time analytics to mobile apps and IoT (Internet of Things) solutions. It\'s particularly popular in scenarios where rapid development and the ability to scale horizontally are important. Security features in MongoDB include authentication, role-based access control, and encryption, both for data at rest and in transit. The database also provides tools for monitoring and performance tuning, including a query profiler and various diagnostic commands. MongoDB offers official drivers for many popular programming languages, making it easy to integrate with various technology stacks. It also has a vibrant ecosystem of third-party tools and frameworks. While MongoDB excels in many scenarios, it\'s important to note that it may not be the best choice for all types of applications, particularly those requiring complex transactions across multiple documents or tables. However, for many modern, data-intensive applications, MongoDB\'s flexibility, scalability, and performance make it a powerful and popular choice in the database landscape.',
		logo: Assets.MongoDB,
		name: 'MongoDB',
		category: 'db'
	}),
	defineSkill({
		slug: 'mysql',
		color: 'blue',
		description: 'MySQL is an open-source relational database management system (RDBMS) that uses Structured Query Language (SQL). Originally developed by MySQL AB and now owned by Oracle Corporation, MySQL has become one of the world\'s most popular open-source databases since its initial release in 1995. It\'s a key component of the LAMP (Linux, Apache, MySQL, PHP/Perl/Python) stack, which is widely used for web application development. MySQL follows the traditional table-based relational model, where data is organized into tables with rows and columns. It supports the full range of SQL operations, including complex queries, joins, and transactions. One of MySQL\'s key strengths is its speed and reliability. It\'s designed to be fast, especially for read-heavy operations, making it well-suited for web applications and other scenarios where read performance is crucial. MySQL supports various storage engines, which determine how data is stored and retrieved. The most commonly used are InnoDB (which supports transactions and foreign keys) and MyISAM (which is faster for read-heavy operations but doesn\'t support transactions). This flexibility allows developers to choose the storage engine that best fits their specific needs. For high availability and scalability, MySQL offers features like replication and clustering. Replication allows data from one MySQL database server (the master) to be copied to one or more other servers (slaves), providing data redundancy and improving read performance. MySQL Cluster provides a way to run MySQL in a distributed computing environment, allowing for high availability and scalability. MySQL includes robust security features, including encrypted connections, access control lists, and plugins for authentication. It also provides backup and recovery tools to help protect against data loss. The database supports a wide range of data types, including numeric, date and time, string types, and spatial data types for geographic information. It also includes features like stored procedures, triggers, and views, which allow for complex operations and data manipulations to be performed within the database itself. MySQL\'s wide adoption means it has excellent support across various programming languages and frameworks. Most major programming languages have libraries or modules for interacting with MySQL databases. While MySQL is powerful and feature-rich, it\'s also known for being relatively easy to set up and use, making it a popular choice for both small projects and large-scale applications. It\'s used by many high-profile websites and applications, including Facebook, Twitter, YouTube, and many more. MySQL\'s combination of performance, reliability, ease of use, and cost-effectiveness (being open-source) has contributed to its enduring popularity in the database world. Despite competition from newer database technologies, MySQL continues to evolve and remain relevant, with ongoing development addressing modern needs such as JSON support and improved performance for large-scale operations.',
		logo: Assets.MySQL,
		name: 'MySQL',
		category: 'db'
	}),
	defineSkill({
		slug: 'postgresql',
		color: 'blue',
		description: 'PostgreSQL, often simply "Postgres," is a powerful, open-source object-relational database system. With its strong reputation for reliability, feature robustness, and performance, PostgreSQL has become one of the most popular database choices for applications ranging from small, single-machine applications to large, data-warehousing systems with many concurrent users. First released in 1996, PostgreSQL is developed by the PostgreSQL Global Development Group, a diverse group of contributors worldwide. PostgreSQL is fully ACID (Atomicity, Consistency, Isolation, Durability) compliant and transactional, ensuring data integrity even in the event of errors or system failures. It supports advanced data types and advanced performance optimization features that are often only found in commercial database systems. One of PostgreSQL\'s standout features is its extensibility. Users can define their own data types, index types, functional languages, and more. This extensibility, coupled with PostgreSQL\'s standards compliance, makes it highly flexible and adaptable to various use cases. PostgreSQL offers robust support for concurrent access through its implementation of Multiversion Concurrency Control (MVCC), allowing for efficient handling of multiple simultaneous operations. The database provides strong support for JSON, allowing it to serve as both a relational and document-style database. This feature makes PostgreSQL well-suited for applications that need to handle both structured and semi-structured data. For scalability, PostgreSQL supports table partitioning, parallel query execution, and various replication methods including built-in logical replication. These features allow PostgreSQL to handle large amounts of data and high-concurrency scenarios effectively. PostgreSQL is known for its strong adherence to SQL standards and its comprehensive feature set. It includes features like window functions, common table expressions, and lateral joins, which are useful for complex queries and data analysis. The database also supports full-text search, enabling sophisticated search capabilities within the database itself. Security features in PostgreSQL are extensive, including robust access-control systems, column and row-level security, and strong encryption options. It also provides various authentication methods and supports SSL connections for secure data transmission. PostgreSQL\'s active community contributes to its continuous improvement and extensive third-party tool ecosystem. This community also ensures excellent documentation and support resources. While PostgreSQL is powerful, it can be more complex to set up and optimize compared to some other databases, potentially requiring more specialized knowledge for advanced use cases. However, for applications requiring a feature-rich, standards-compliant, and reliable database system, PostgreSQL is often an excellent choice. Its use in critical systems by companies like Apple, Instagram, and Cisco demonstrates its capability to handle enterprise-level demands.',
		logo: Assets.PostgreSQL,
		name: 'PostgreSQL',
		category: 'db'
	}),
	defineSkill({
		slug: 'mssql',
		color: 'red',
		description: 'Microsoft SQL Server, commonly referred to as MSSQL, is a relational database management system developed by Microsoft. First released in 1989, MSSQL has become one of the leading database platforms, particularly in enterprise environments running on Windows servers, though it now also supports Linux. MSSQL is known for its robust feature set, high performance, and tight integration with other Microsoft technologies. At its core, MSSQL uses Transact-SQL (T-SQL), Microsoft\'s proprietary extension to SQL, which adds a rich set of programming constructs to standard SQL. This allows for powerful data manipulation and complex query operations directly within the database. One of MSSQL\'s key strengths is its performance optimization features. It includes advanced query processing capabilities, intelligent query plan caching, and automated tuning features that help maintain optimal performance even as data and query patterns change over time. For data warehousing and analytics, MSSQL offers features like columnstore indexes, which can dramatically improve the performance of large analytical queries. It also includes built-in data mining capabilities and integration with Microsoft\'s business intelligence tools. MSSQL provides robust security features, including encryption at rest and in motion, row-level security, dynamic data masking, and always encrypted, which allows for operations on encrypted data without decryption. The database also offers comprehensive auditing capabilities to track access and changes to data. For high availability and disaster recovery, MSSQL includes features like AlwaysOn Availability Groups, which provide advanced failover and replication capabilities. This allows for minimal downtime and data loss in the event of hardware failures or other issues. MSSQL integrates seamlessly with other Microsoft technologies, including .NET Framework, Azure cloud services, and Power BI for business intelligence. This integration makes it a natural choice for organizations heavily invested in the Microsoft ecosystem. In recent years, Microsoft has made significant strides in making MSSQL more open and flexible. It now supports multiple programming languages, including Python and R, directly within the database for advanced analytics. The introduction of SQL Server on Linux and Docker containers has also expanded its reach beyond Windows-only environments. MSSQL includes advanced features for handling complex data types and operations. This includes support for JSON, graph data, and spatial data, making it versatile for various types of applications. While MSSQL is a commercial product with associated licensing costs, it also offers a free Express edition suitable for smaller applications and development purposes. The platform is known for its comprehensive management tools, including SQL Server Management Studio, which provides a user-friendly interface for database administration and query development. Microsoft\'s regular release cycle ensures that MSSQL continually evolves to meet modern data management needs. Recent versions have focused on improving performance, security, and cloud integration. While MSSQL can be more expensive and complex compared to some open-source alternatives, its robust feature set, strong performance, and excellent support make it a top choice for many organizations, especially those already invested in Microsoft technologies.',
		logo: Assets.MSSQL,
		name: 'Microsoft SQL Server',
		category: 'db'
	}),
	defineSkill({
		slug: 'oracle',
		color: 'red',
		description: 'Oracle Database, commonly referred to as Oracle, is a multi-model database management system produced and marketed by Oracle Corporation. First developed by Lawrence Ellison and other engineers in 1977, Oracle has become one of the most widely used enterprise-grade database systems in the world. Known for its reliability, scalability, and extensive feature set, Oracle Database is particularly popular in large-scale enterprise environments and for mission-critical applications. Oracle Database supports various data models including relational, object-relational, and more recently, document, graph, and key-value store models. This multi-model approach allows it to handle diverse types of data within a single database system. One of Oracle\'s key strengths is its performance and scalability. It includes advanced features for optimizing query performance, such as the Cost-Based Optimizer (CBO), which determines the most efficient way to execute SQL statements. Oracle\'s Real Application Clusters (RAC) technology allows the database to run across a cluster of servers, providing high availability and scalability for large-scale applications. For data warehousing and analytics, Oracle offers features like columnar storage, in-memory processing, and advanced compression techniques. These features allow for extremely fast processing of large analytical queries, making Oracle well-suited for business intelligence and big data applications. Oracle provides comprehensive security features, including encryption, access controls, and auditing capabilities. Its Virtual Private Database feature allows for fine-grained access control policies to be applied at the row level. Oracle also offers advanced features for ensuring data integrity and availability. This includes various backup and recovery options, flashback technologies for undoing changes, and Data Guard for disaster recovery. The database supports a wide range of programming languages and includes PL/SQL, Oracle\'s proprietary extension to SQL, which allows for complex procedural operations to be performed within the database. Oracle has made significant strides in cloud computing, offering Oracle Cloud and Autonomous Database services. These cloud offerings provide self-driving, self-securing, and self-repairing capabilities, aiming to reduce manual management and improve security. While Oracle Database is known for its comprehensive feature set, it\'s also recognized for its complexity and potentially high costs, especially for large deployments. However, for organizations requiring a highly scalable, feature-rich database system with strong support and a long track record in enterprise environments, Oracle remains a top choice. Oracle\'s ecosystem includes a wide range of related software products for business intelligence, enterprise resource planning, customer relationship management, and more, allowing for deep integration across various business processes. Despite increasing competition from both traditional relational databases and newer NoSQL systems, Oracle continues to evolve and maintain its position as a leader in the database market, particularly for large-scale, mission-critical applications in enterprise environments.',
		logo: Assets.Oracle,
		name: 'Oracle Database',
		category: 'db'
	}),
	defineSkill({
		slug: 'kubernetes',
		color: 'blue',
		description: 'Kubernetes, often abbreviated as K8s, is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. Originally developed by Google and released in 2014, Kubernetes is now maintained by the Cloud Native Computing Foundation (CNCF). It has become the de facto standard for container orchestration, playing a crucial role in modern cloud-native architectures. At its core, Kubernetes provides a framework for running distributed systems resiliently. It takes care of scaling and failover for your application, provides deployment patterns, and more. Kubernetes works with a range of container tools, including Docker, and can run in various environments, from physical to virtual machines, in the cloud, or in hybrid deployments. One of Kubernetes\' key features is its ability to automatically manage containerized applications across multiple hosts. It can handle tasks such as deployment, scheduling, load balancing, scaling, and monitoring. This automation significantly reduces the operational burden of managing large-scale containerized applications. Kubernetes organizes containers into "Pods," the smallest deployable units in the Kubernetes ecosystem. Pods can contain one or more containers that are always scheduled together. Above Pods, Kubernetes uses abstractions like Deployments, Services, and Ingress to manage how applications are deployed, exposed, and accessed. For scalability, Kubernetes can automatically adjust the number of running containers based on CPU utilization or other application-provided metrics. It also provides features for rolling updates and rollbacks, allowing for zero-downtime deployments. Kubernetes offers robust networking capabilities, allowing Pods to communicate with each other and providing ways to expose services to external networks. It also includes built-in service discovery and load balancing. For storage, Kubernetes provides an abstraction that allows containerized applications to use persistent storage without being tightly coupled to the underlying storage system. This is achieved through Persistent Volumes and Persistent Volume Claims. Kubernetes has a large and active ecosystem, with many tools and extensions available. This includes monitoring solutions, logging frameworks, security tools, and more. The platform\'s extensibility is one of its strengths, allowing it to be adapted to a wide range of use cases. While Kubernetes offers powerful features, it\'s also known for its complexity. Setting up and managing a Kubernetes cluster requires significant expertise, and there can be a steep learning curve for teams new to the technology. However, managed Kubernetes services offered by cloud providers have made it easier to get started with Kubernetes without managing the underlying infrastructure. Kubernetes has become an essential tool in the DevOps and Site Reliability Engineering (SRE) toolkits, enabling practices like infrastructure as code, continuous deployment, and auto-scaling. Its widespread adoption has also led to it becoming a valuable skill for many IT professionals. As containerization and microservices architectures continue to grow in popularity, Kubernetes remains at the forefront of container orchestration technologies, continually evolving to meet the needs of modern, cloud-native applications.',
		logo: Assets.Kubernetes,
		name: 'Kubernetes',
		category: 'devops'
	}),
	defineSkill({
		slug: 'aws',
		color: 'orange',
		description: 'Amazon Web Services (AWS) is a comprehensive and widely adopted cloud platform offered by Amazon. Launched in 2006, AWS provides a vast array of cloud computing services that enable organizations of all sizes to build sophisticated, scalable applications. AWS offers over 200 fully featured services from data centers globally, covering computing, storage, databases, analytics, networking, mobile, developer tools, management tools, IoT, security, and enterprise applications. One of AWS\'s key strengths is its vast array of services. For computing, AWS offers services like EC2 (Elastic Compute Cloud) for virtual servers, Lambda for serverless computing, and ECS (Elastic Container Service) for container management. Storage options include S3 (Simple Storage Service) for object storage, EBS (Elastic Block Store) for block storage, and Glacier for long-term cold storage. AWS provides various database services, including RDS for relational databases, DynamoDB for NoSQL databases, and Redshift for data warehousing. For networking, AWS offers VPC (Virtual Private Cloud) for creating isolated network environments, Route 53 for DNS management, and CloudFront for content delivery. AWS also provides a range of machine learning and artificial intelligence services, including SageMaker for building, training, and deploying machine learning models, and various pre-trained AI services for tasks like image recognition and natural language processing. Security is a crucial aspect of AWS, with services like IAM (Identity and Access Management) for controlling access to AWS resources, AWS Shield for DDoS protection, and various encryption services. AWS\'s global infrastructure allows for high availability and disaster recovery options, with multiple geographic regions and availability zones. This global presence also enables compliance with data residency requirements in various jurisdictions. One of AWS\'s significant advantages is its scalability and elasticity. Services can be scaled up or down based on demand, allowing businesses to pay only for what they use. This model has made AWS particularly attractive for startups and enterprises alike. AWS provides various tools for managing and monitoring cloud resources, including CloudWatch for monitoring, CloudTrail for auditing, and AWS Config for assessing, auditing, and evaluating configurations of AWS resources. For developers, AWS offers services like CodeCommit for source control, CodeBuild for compiling code, and CodeDeploy for automating application deployments. AWS also supports a wide range of programming languages, frameworks, and operating systems. While AWS offers tremendous capabilities, it\'s important to note that its vast array of services can be complex to navigate and manage, especially for those new to cloud computing. However, AWS provides extensive documentation, training resources, and support options to help users leverage its services effectively. AWS\'s market leadership, continuous innovation, and comprehensive service offerings have made it a cornerstone of modern cloud computing, powering a significant portion of the internet and enabling digital transformation across industries.',
		logo: Assets.AWS,
		name: 'Amazon Web Services',
		category: 'devops'
	}),
	defineSkill({
		slug: 'azure',
		color: 'blue',
		description: 'Microsoft Azure, often referred to simply as Azure, is a comprehensive cloud computing platform and infrastructure created by Microsoft for building, testing, deploying, and managing applications and services through Microsoft-managed data centers. Launched in 2010, Azure has grown to become one of the leading cloud platforms globally, offering a wide array of cloud services including those for computing, analytics, storage, and networking. Azure provides a range of capabilities such as Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS) that can be used for services such as analytics, virtual computing, storage, networking, and much more. It supports many different programming languages, tools, and frameworks, including both Microsoft-specific and third-party software and systems. One of Azure\'s key strengths is its integration with Microsoft\'s ecosystem of products and services. For organizations already using Microsoft technologies like Windows Server, Active Directory, and System Center, Azure provides a natural extension to the cloud. Azure\'s compute services include Virtual Machines for IaaS scenarios, App Services for hosting web applications, and Azure Kubernetes Service (AKS) for container orchestration. For serverless computing, Azure offers Functions, which allows developers to run event-triggered code without managing infrastructure. Azure provides various storage options, including Blob storage for unstructured data, File storage for managed file shares, and Queue storage for message queuing. For databases, Azure offers services like Azure SQL Database for relational data, Cosmos DB for globally distributed NoSQL data, and Azure Database for MySQL and PostgreSQL. In the realm of big data and analytics, Azure provides services like HDInsight for big data processing, Databricks for Apache Spark-based analytics, and Synapse Analytics for enterprise data warehousing. Azure\'s AI and machine learning services include Azure Machine Learning for building, training, and deploying models, and Cognitive Services for incorporating pre-built AI capabilities into applications. For Internet of Things (IoT) scenarios, Azure IoT Hub provides a cloud-hosted solution backend to connect virtually any device. Azure also offers robust security features, including Azure Active Directory for identity management, Key Vault for managing secrets, and Security Center for unified security management and advanced threat protection. For developers, Azure DevOps provides a set of development tools for software projects, including Azure Pipelines for continuous integration and delivery. Azure also supports a wide range of development languages and platforms. Azure\'s global infrastructure spans over 60 regions, enabling businesses to run their applications close to their customers, ensuring low latency and high availability. This global presence also aids in compliance with data residency requirements. While Azure offers a vast array of services that can be powerful when used correctly, it can also be complex to navigate and manage, especially for those new to cloud computing or coming from non-Microsoft backgrounds. However, Microsoft provides extensive documentation, learning paths, and certifications to help users master the platform. With its strong integration with Microsoft products, comprehensive service offerings, and continuous innovation, Azure has established itself as a major player in the cloud computing landscape, serving businesses of all sizes across various industries.',
		logo: Assets.Azure,
		name: 'Microsoft Azure',
		category: 'devops'
	}),
	defineSkill({
		slug: 'gcp',
		color: 'red',
		description: 'Google Cloud Platform (GCP) is a suite of cloud computing services offered by Google. Launched in 2008, GCP has grown to become one of the leading cloud platforms globally, providing a wide array of services for computing, storage, networking, big data, machine learning, and the Internet of Things (IoT). GCP leverages Google\'s core infrastructure, data analytics, and machine learning capabilities, offering these technologies to businesses and developers worldwide. One of GCP\'s key strengths is its infrastructure. Google has invested heavily in its global network, resulting in a fast, reliable, and secure platform. GCP\'s network is one of the largest and most advanced in the world, with multiple points of presence across the globe, ensuring low latency and high availability. For compute services, GCP offers Compute Engine for virtual machines, App Engine for fully managed application hosting, and Kubernetes Engine for containerized applications. Cloud Functions provides a serverless execution environment for building and connecting cloud services. GCP\'s storage options include Cloud Storage for object storage, Cloud SQL for managed MySQL, PostgreSQL, and SQL Server databases, and Cloud Spanner for globally distributed relational database services. For big data and analytics, GCP provides BigQuery, a fully managed, serverless data warehouse that enables super-fast SQL queries using the processing power of Google\'s infrastructure. Other data services include Dataflow for stream and batch processing, and Pub/Sub for real-time messaging. GCP is particularly strong in machine learning and artificial intelligence. It offers a range of AI and ML services, from pre-trained models like Vision AI and Natural Language AI to tools for building custom models with TensorFlow. Vertex AI provides a unified platform for building, deploying, and managing machine learning models. Networking services in GCP include Virtual Private Cloud (VPC) for creating isolated network environments, Cloud CDN for content delivery, and Cloud DNS for domain name system services. For DevOps and management, GCP offers Cloud Build for continuous integration and delivery, Cloud Monitoring for infrastructure and application monitoring, and Cloud Logging for centralized logging. GCP places a strong emphasis on security and compliance. It offers various security services including Cloud Identity and Access Management (IAM) for access control, Cloud Security Scanner for app engine security scanning, and Cloud Key Management Service for encryption key management. One of GCP\'s unique offerings is its commitment to sustainability. Google has been carbon neutral since 2007 and aims to run on carbon-free energy 24/7 by 2030. This commitment extends to GCP, making it an attractive option for organizations with strong environmental goals. While GCP offers a comprehensive set of services, it\'s generally considered to have a smaller market share compared to AWS and Azure. However, it\'s particularly strong in certain areas like data analytics, machine learning, and containerization. GCP is known for its pricing model, which includes sustained use discounts and per-second billing for many compute services. This can lead to cost savings, especially for variable workloads. Despite its strengths, GCP can have a learning curve, particularly for those not familiar with Google\'s ecosystem. However, Google provides extensive documentation, tutorials, and certifications to help users get up to speed. With its powerful infrastructure, advanced analytics and ML capabilities, and commitment to innovation and sustainability, Google Cloud Platform has established itself as a major player in the cloud computing landscape, particularly appealing to organizations looking to leverage cutting-edge technologies in areas like big data, AI, and ML.',
		logo: Assets.GCP,
		name: 'Google Cloud Platform',
		category: 'devops'
	}),
	defineSkill({
		slug: 'git',
		color: 'orange',
		description: 'Git is a distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Created by Linus Torvalds in 2005 for development of the Linux kernel, Git has become the most widely used modern version control system in the world. Git is fundamentally a content-addressable filesystem with a VCS user interface written on top of it. Its key design objectives include strong support for non-linear development (thousands of parallel branches), distributed development (allowing full functionality without network access), and efficiency in handling large projects. One of Git\'s key features is its branching model. Git allows and encourages developers to have multiple local branches that can be entirely independent of each other. The creation, merging, and deletion of these lines of development takes seconds, encouraging developers to use branches for everything from new features to bug fixes. This branching capability, combined with its distributed nature, enables a wide variety of source code management workflows. Git is distributed, which means that instead of having a single central repository that developers commit to, every developer has a full copy of the repository, including its full history. This allows for offline work and provides a natural backup mechanism. When developers push changes to a shared repository, they\'re merging their full branch, not just a set of changes. Git uses a data model that ensures the cryptographic integrity of every bit of your project. Every file and commit is checksummed and retrieved by its checksum when checked back out. It\'s impossible to get anything out of Git other than the exact bits you put in. This level of integrity makes it ideal for use in mission-critical projects. Git is designed to be fast and efficient with large projects. Most operations in Git are performed locally, providing significant performance benefits. Git also compresses content using delta encoding, keeping repositories compact. Git includes a staging area (or index), which allows developers to format and review their changes before committing. This provides more control over what gets committed and when. While powerful, Git can have a steep learning curve, especially for those used to centralized version control systems. Its command-line interface, while comprehensive, can be intimidating for beginners. However, many graphical user interfaces have been developed to make Git more accessible. Git\'s popularity has led to the rise of hosting services like GitHub, GitLab, and Bitbucket, which provide additional collaboration features on top of Git repositories. These platforms have further popularized Git and open-source development practices. Git\'s impact on software development practices has been profound. It has enabled new workflows like Git Flow and GitHub Flow, and has become an essential tool in modern software development practices, including continuous integration and continuous deployment (CI/CD) pipelines. Understanding Git is now considered a fundamental skill for software developers across all domains.',
		logo: Assets.Git,
		name: 'Git',
		category: 'devtools'
	}),
	defineSkill({
		slug: 'jenkins',
		color: 'red',
		description: 'Jenkins is an open-source automation server that has become a crucial tool in the world of continuous integration and continuous delivery (CI/CD). Created by Kohsuke Kawaguchi in 2011, Jenkins has grown to be one of the most popular automation servers, helping developers around the world automate parts of the software development process. At its core, Jenkins is designed to automate any task related to building, testing, and delivering or deploying software. It works as a standalone application, typically run in its own process with the built-in Java servlet container/application server. Jenkins supports the complete development lifecycle of software from building, testing, documenting the software, deploying, and other stages of the software development lifecycle. One of Jenkins\' key strengths is its extensibility. It has a thriving plugin ecosystem with over 1,800 community-contributed plugins. These plugins extend Jenkins\' functionality to integrate with nearly every tool in the CI/CD toolchain, including version control systems, build tools, code quality metrics, and deployment and notification systems. Jenkins uses a master-slave architecture to manage distributed builds. This allows Jenkins to scale from a single-machine installation to large, distributed systems involving numerous machines. Jenkins jobs, the basic unit of work in Jenkins, can be configured to do virtually any task. This includes compiling code, running tests, performing static code analysis, deploying applications to various environments, and much more. These jobs can be triggered by various means, including changes in version control systems, scheduling, or as a result of other jobs completing. Jenkins provides a web interface for configuration and management, making it accessible to team members beyond just developers. It also offers a robust set of APIs, allowing for programmatic interaction and integration with other systems. One of Jenkins\' notable features is its Pipeline functionality, which allows developers to define their delivery pipeline as code. This Pipeline DSL (Domain Specific Language) enables more complex, multi-step CI/CD workflows to be defined and version controlled alongside the rest of the project\'s source code. While powerful, Jenkins can be complex to set up and maintain, especially for large, complex build and deploy pipelines. It requires ongoing management to keep plugins updated and to ensure it\'s running efficiently. Security is also a consideration, as Jenkins often has access to sensitive parts of an organization\'s infrastructure. Jenkins has played a significant role in the adoption of DevOps practices, enabling teams to automate their software delivery process and reduce the time between writing code and having it deployed to production. It has become a standard tool in many organizations\' DevOps toolchains. Despite competition from newer CI/CD tools, particularly cloud-based services, Jenkins remains widely used due to its flexibility, extensibility, and the wealth of knowledge and plugins built up around it over the years. Understanding Jenkins is valuable for developers, operations personnel, and anyone involved in the software delivery process in organizations practicing CI/CD.',
		logo: Assets.Jenkins,
		name: 'Jenkins',
		category: 'devops'
	}),
	defineSkill({
		slug: 'travis',
		color: 'red',
		description: 'Travis CI is a hosted continuous integration and deployment system that has gained significant popularity, especially in the open-source community. Founded in 2011, Travis CI was one of the first CI/CD services to offer free builds for open-source projects, which greatly contributed to its adoption and popularity. Travis CI automates the process of building, testing, and deploying code changes, helping developers catch and fix issues quickly. Travis CI works by integrating with version control systems, primarily GitHub. When new code is pushed to a repository, Travis CI automatically detects the change, spins up a virtual machine or container, and runs the build and test processes as specified in the project\'s configuration file. This configuration file, typically named .travis.yml, is written in YAML and resides in the root of the repository. It specifies the programming language, build environment, dependencies, and scripts to run for building and testing the project. One of Travis CI\'s strengths is its support for a wide range of programming languages and frameworks, including Ruby, Python, Node.js, Java, PHP, Go, and many more. It also supports multiple operating systems, allowing developers to test their code on different platforms. Travis CI offers parallel build execution, allowing multiple jobs to run simultaneously, which can significantly speed up the build and test process for larger projects. It also provides a feature called build matrices, which allows testing against multiple versions of languages or dependencies in a single build. For deployment, Travis CI integrates with various platforms and services, allowing automatic deployment of applications to production or staging environments after successful builds. This includes support for deploying to cloud platforms like AWS, Google Cloud Platform, and Heroku. Travis CI provides detailed logs of each build, making it easier for developers to diagnose and fix issues. It also offers notifications through various channels (email, Slack, etc.) to keep team members informed about build statuses. While Travis CI is particularly known for its support of open-source projects, it also offers paid plans for private repositories with additional features and support. One of Travis CI\'s notable features is its ability to cache dependencies between builds, which can significantly reduce build times by avoiding the need to re-download dependencies for each build. Travis CI has played a significant role in promoting and facilitating good development practices, particularly in the open-source world. Its free tier for open-source projects has made continuous integration accessible to many projects that might not otherwise have had the resources to implement it. However, it\'s worth noting that in recent years, Travis CI has faced increased competition from other CI/CD services, some of which offer more features or better pricing for certain use cases. Additionally, Travis CI was acquired by Idera in 2019, which led to some changes in their pricing model and caused some concern in the open-source community. Despite these challenges, Travis CI remains a widely used and respected tool in the CI/CD landscape, particularly for open-source projects. Its ease of use, extensive documentation, and strong integration with GitHub continue to make it a popular choice for many developers and organizations looking to implement continuous integration and deployment in their software development workflows.',
		logo: Assets.Travis,
		name: 'Travis CI',
		category: 'devops'
	}),
	defineSkill({
		slug: 'circleci',
		color: 'green',
		description: 'CircleCI is a popular continuous integration and continuous delivery (CI/CD) platform that automates the build, test, and deployment processes of software applications. Founded in 2011, CircleCI has grown to become one of the leading CI/CD services, used by thousands of organizations worldwide. CircleCI is designed to help development teams release code rapidly and efficiently by automating the integration and delivery process. It supports a wide variety of programming languages, frameworks, and deployment targets, making it a versatile choice for diverse development environments. One of CircleCI\'s key features is its cloud-based architecture, which allows for easy scalability and eliminates the need for teams to manage their own CI/CD infrastructure. However, it also offers a self-hosted option for organizations with specific security or regulatory requirements. CircleCI uses a YAML configuration file (usually .circleci/config.yml) to define the steps of your build, test, and deployment processes. This "configuration as code" approach allows developers to version control their CI/CD processes alongside their application code. The platform offers a powerful set of primitives for creating complex workflows. Jobs can be organized into workflows, allowing for sophisticated build, test, and deployment pipelines. CircleCI also supports parallel execution of jobs, which can significantly speed up build and test times for large projects. One of CircleCI\'s strengths is its extensive ecosystem of integrations and orbs. Orbs are reusable packages of CircleCI configuration that can be shared across projects, making it easier to implement complex configurations and integrate with various tools and services. CircleCI provides robust caching mechanisms to speed up builds by reusing data from previous builds. This can significantly reduce build times, especially for projects with large dependency trees. The platform offers detailed insights into build performance, including timing breakdowns for individual steps and historical trends. This can help teams identify and resolve bottlenecks in their CI/CD pipelines. For teams working on mobile applications, CircleCI offers specific features for iOS and Android development, including built-in support for Xcode and Android SDK. CircleCI places a strong emphasis on security. It offers features like contexts for securely storing and sharing environment variables across projects, and supports various security protocols and compliance standards. The platform provides both SSH and web-based access to build environments, making it easier for developers to debug issues that only occur in the CI environment. CircleCI offers a free tier for small teams and open-source projects, with paid plans available for larger teams and more demanding workloads. Its pricing model is based on the number of concurrent jobs and other usage factors. While CircleCI is powerful and flexible, it can have a steeper learning curve compared to some other CI/CD tools, particularly when setting up complex workflows. However, its extensive documentation and active community help mitigate this challenge. CircleCI has played a significant role in enabling DevOps practices and helping teams achieve faster, more reliable software delivery. Its combination of power, flexibility, and ease of use has made it a popular choice for organizations of all sizes, from small startups to large enterprises. As the software development landscape continues to evolve, CircleCI continues to innovate, adding features to support modern development practices like microservices architectures and container-based deployments.',
		logo: Assets.CircleCI,
		name: 'CircleCI',
		category: 'devops'
	}),
	defineSkill({
		slug: 'android',
		color: 'green',
		description: 'Android is a mobile operating system developed by Google. It was first released in 2008 and has since become the world\'s most widely used smartphone operating system. Based on a modified version of the Linux kernel and other open source software, Android is designed primarily for touchscreen mobile devices such as smartphones and tablets. Android\'s architecture is composed of several layers, including the Linux Kernel at the bottom, followed by Hardware Abstraction Layer (HAL), Native C/C++ Libraries and Android Runtime, Java API Framework, and System Apps at the top. This layered approach provides a flexible environment for app developers while ensuring system stability and security. One of Android\'s key strengths is its open-source nature. The Android Open Source Project (AOSP) allows device manufacturers to customize the OS for their hardware, leading to a diverse ecosystem of Android devices. This openness has contributed significantly to Android\'s widespread adoption. For app developers, Android provides a rich set of development tools and APIs. The primary programming languages for Android app development are Java and Kotlin, with Kotlin being the preferred language as of 2019. The Android Software Development Kit (SDK) includes a comprehensive set of development tools including debugger, software libraries, handset emulator, documentation, sample code, and tutorials. Android Studio, based on IntelliJ IDEA, is the official Integrated Development Environment (IDE) for Android app development. It provides features like a flexible Gradle-based build system, a fast emulator, a unified environment for development for all Android devices, and more. Android apps are distributed primarily through the Google Play Store, which offers features like in-app purchases, subscription services, and app updates. However, Android\'s open nature also allows for alternative app stores and direct APK (Android Package Kit) installations. Android\'s security model is based on app sandboxing, where each app runs in its own secure environment and cannot access other apps\' data without explicit permissions. This model has evolved over the years to give users more granular control over app permissions. The platform supports a wide range of hardware features including GPS, accelerometers, gyroscopes, proximity sensors, and more, enabling developers to create rich, interactive applications. It also supports various wireless technologies like GSM, Bluetooth, and Wi-Fi. Google Play Services, while not part of the open-source Android, provides additional APIs for Google-specific services like Google Maps, Google Sign-In, and more. These services are updated through the Play Store, allowing Google to add new system functionality through Play Services without pushing an entire system update. Android has a fragmented ecosystem due to the variety of devices and manufacturers. This can pose challenges for developers who need to ensure their apps work across different screen sizes, hardware capabilities, and OS versions. However, Google has introduced tools and guidelines to help manage this fragmentation. As mobile computing continues to evolve, Android has expanded beyond smartphones and tablets to other form factors including wearables (Wear OS), TV (Android TV), and automotive (Android Auto). With its large market share, rich development ecosystem, and continuous evolution, Android remains a crucial platform in the mobile and broader computing landscape. For developers, proficiency in Android development opens up vast opportunities in the mobile app market and beyond.',
		logo: Assets.Android,
		name: 'Android',
		category: 'mobile'
	}),
	defineSkill({
		slug: 'ios',
		color: 'gray',
		description: 'iOS is a mobile operating system created and developed by Apple Inc. exclusively for its hardware. It was first introduced in 2007 for the iPhone and has since been extended to support other Apple devices such as the iPod Touch, iPad, and Apple TV. iOS is known for its user-friendly interface, smooth performance, and tight integration with Apple\'s hardware. The iOS architecture is built on layers, with the Core OS and Core Services layers at the bottom, providing fundamental system services, followed by the Media layer for graphics, audio, and video technologies. The Cocoa Touch layer sits at the top, providing the key frameworks for building iOS apps. iOS is written in C, C++, Objective-C, and Swift. Swift, introduced by Apple in 2014, has become the preferred language for iOS development due to its modern features, safety, and performance improvements over Objective-C. For app development, iOS provides a rich set of tools and frameworks. Xcode, Apple\'s integrated development environment (IDE), is the primary tool for iOS app development. It includes Interface Builder for designing user interfaces, instruments for performance analysis, and simulators for testing apps on various iOS devices. The iOS SDK (Software Development Kit) provides APIs and tools necessary to develop, install, run, and test native iOS apps. It includes frameworks like UIKit for building user interfaces, Core Data for data persistence, Core Animation for fluid animations, and many more. iOS follows a strict security model. Apps run in sandboxed environments and must request permission from the user to access device features like the camera, microphone, or user\'s location. This model helps protect user privacy and system integrity. Distribution of iOS apps is primarily through the App Store, which provides a curated and secure marketplace for users to download apps. The App Store review process, while sometimes criticized for its stringency, helps maintain a high standard of quality and security for iOS apps. iOS is known for its consistent and intuitive user interface. It pioneered many mobile UI concepts that have become standard across mobile platforms, such as multi-touch gestures, smooth scrolling, and responsive animations. The platform supports a wide range of features including Face ID and Touch ID for biometric authentication, Apple Pay for secure payments, ARKit for augmented reality experiences, Core ML for on-device machine learning, and more. These features allow developers to create sophisticated and feature-rich applications. One of iOS\'s strengths is its tight integration with other Apple services and devices. Features like Handoff and Continuity allow for seamless transitions between iOS devices and Macs. iCloud provides cloud storage and synchronization services that can be leveraged by third-party apps. While iOS offers a polished and controlled ecosystem, it is also more closed compared to platforms like Android. iOS devices don\'t support direct file system access or the installation of apps from outside the App Store (without jailbreaking), which can be limiting for some users and developers. However, this closed nature contributes to iOS\'s reputation for security and stability. iOS receives annual major updates, typically released in September, which bring new features and improvements. Apple generally provides software support for iOS devices for several years after their release, which contributes to the platform\'s longevity. For developers, iOS represents a lucrative market due to the high engagement and spending habits of iOS users. While the iOS market share is smaller than Android globally, iOS users tend to spend more on apps and in-app purchases. Proficiency in iOS development is a valuable skill in the job market, with many companies prioritizing iOS development due to the platform\'s importance in key markets like the United States. As mobile computing continues to evolve, iOS remains at the forefront, continually introducing new technologies and capabilities that shape the mobile landscape.',
		logo: Assets.IOS,
		name: 'iOS',
		category: 'mobile'
	}),
	defineSkill({
		slug: 'react-native',
		color: 'blue',
		description: 'React Native is an open-source mobile application development framework created by Facebook. It was first released in 2015 and has since become one of the most popular frameworks for building cross-platform mobile applications. React Native allows developers to use React along with native platform capabilities to create mobile applications for both iOS and Android platforms using a single codebase. At its core, React Native uses React, a popular JavaScript library for building user interfaces, along with native components and APIs. This approach allows developers to write code once and deploy it to multiple platforms, significantly reducing development time and cost. One of React Native\'s key features is its "learn once, write anywhere" philosophy. While the framework allows for code reuse across platforms, it also provides the flexibility to implement platform-specific code when necessary. This enables developers to create apps that not only perform well but also feel native to each platform. React Native uses a bridge to communicate between JavaScript and the native platform. When a React Native app runs, it creates a JavaScript virtual machine that executes the application code. The bridge then translates these JavaScript calls into native platform calls, allowing the app to interact with platform-specific APIs and render native components. This architecture allows React Native apps to achieve near-native performance while still providing the development efficiency of a cross-platform framework. The framework provides a set of pre-built components that map directly to their native counterparts. For example, a React Native <View> component will render as a UIView on iOS and as a View on Android. This abstraction allows developers to create native-looking UIs without having to learn the intricacies of each platform\'s UI framework. React Native supports hot reloading, which allows developers to see the results of their code changes in real-time without having to recompile the entire app. This feature significantly speeds up the development process. For styling, React Native uses a subset of CSS, making it familiar for web developers transitioning to mobile development. It also supports Flexbox for creating flexible layouts that work across different screen sizes. While React Native provides many components out of the box, it also has a vibrant ecosystem of third-party libraries and tools. This allows developers to extend the framework\'s capabilities and integrate with various services and APIs. React Native is not without its challenges. Performance can be an issue for very complex apps or those requiring heavy computations. In such cases, developers may need to write certain parts of the app in native code. Additionally, keeping up with updates to both React Native and the underlying native platforms can be demanding. Despite these challenges, React Native has been adopted by many large companies including Facebook, Instagram, Walmart, and Airbnb. Its ability to speed up development cycles and reduce costs while still delivering a native-like experience has made it a popular choice for both startups and established companies. For developers, proficiency in React Native is a valuable skill. It allows them to leverage their web development skills (particularly React and JavaScript) to create mobile applications, opening up opportunities in the mobile development market. As mobile continues to be a crucial platform for businesses and consumers alike, the demand for React Native developers remains strong. React Native continues to evolve, with Facebook and the open-source community regularly adding new features and improvements. This ongoing development ensures that React Native remains a relevant and powerful tool in the mobile development landscape.',
		logo: Assets.ReactNative,
		name: 'React Native',
		category: 'mobile'
	}),
	defineSkill({
		slug: 'flutter',
		color: 'blue',
		description: 'Flutter is an open-source UI software development kit created by Google. First released in May 2017, Flutter has quickly gained popularity and become one of the leading frameworks for cross-platform mobile app development. Flutter allows developers to build natively compiled applications for mobile, web, and desktop from a single codebase. At its core, Flutter uses the Dart programming language, also developed by Google. Dart is an object-oriented, class-based language with C-style syntax that can be compiled ahead of time (AOT) into native code for multiple platforms. This AOT compilation is one of the key factors contributing to Flutter\'s performance. One of Flutter\'s most distinctive features is its approach to UI development. Instead of using platform-specific UI components, Flutter uses its own rendering engine to draw the UI. This means that Flutter apps look and behave the same on iOS and Android (unless intentionally styled differently), providing a consistent experience across platforms. Flutter\'s architecture is based on a layered model. At the bottom is the Flutter engine, written in C++, which provides low-level rendering support using Google\'s Skia graphics library. Above this sits the Dart framework, and at the top are the widget libraries that developers use to build their apps. Flutter\'s widget-based architecture is another key feature. Everything in Flutter is a widget, from layout elements to styling and animations. This consistent approach to UI development makes it easier for developers to create complex, custom UIs. Flutter provides a rich set of pre-built widgets that implement the Material Design and Cupertino (iOS-style) design languages, allowing developers to create native-looking apps for both Android and iOS. One of Flutter\'s strengths is its hot reload feature, which allows developers to see the results of their code changes almost instantly, without losing the current state of the app. This significantly speeds up the development process and makes it easier to experiment with UI changes. Flutter also offers strong performance. Because Flutter doesn\'t rely on intermediate code representations or interpretation, it can communicate with the platform directly, reducing the performance bottlenecks often associated with other cross-platform frameworks. For state management, Flutter is flexible and supports various approaches, including setState for simple apps, InheritedWidget for passing data down the widget tree, and more complex solutions like Provider, Riverpod, or BLoC for larger applications. Flutter has a growing ecosystem of packages and plugins available through pub.dev, Dart\'s official package repository. This allows developers to easily add functionality to their apps, from integrating with device features to connecting with backend services. While Flutter started as a mobile development framework, it has expanded to support web and desktop platforms as well. This allows developers to target multiple platforms with a single codebase, potentially saving significant development time and resources. However, Flutter is not without challenges. Its approach of drawing its own UI can sometimes make it difficult to achieve platform-specific looks or behaviors when needed. Additionally, the resulting app sizes can be larger than their native counterparts due to the inclusion of the Flutter runtime. Despite these challenges, Flutter has seen rapid adoption in the developer community. It\'s used by major companies like Google, Alibaba, and BMW for their mobile apps. For developers, proficiency in Flutter opens up opportunities in cross-platform mobile development, an increasingly important skill as businesses seek to target multiple platforms efficiently. As Flutter continues to evolve and expand its capabilities, it remains a powerful and popular choice for developing beautiful, high-performance apps across multiple platforms.',
		logo: Assets.Flutter,
		name: 'Flutter',
		category: 'mobile'
	}),
	defineSkill({
		slug: 'unity',
		color: 'black',
		description: 'Unity is a cross-platform game engine developed by Unity Technologies, first announced and released in June 2005 at Apple\'s Worldwide Developers Conference as a Mac OS X-exclusive game engine. Since then, it has grown to support more than 25 platforms. Unity\'s primary use is for developing video games and simulations for computers, consoles, and mobile devices, but it has also been adopted by industries outside video gaming, such as film, automotive, architecture, engineering, and construction. Unity is known for its ability to create both 2D and 3D games and experiences. It provides a robust set of tools for game development, including a powerful rendering engine, physics engine, animation system, audio system, and networking capabilities. One of Unity\'s key strengths is its cross-platform capabilities. Developers can create games once and deploy them to multiple platforms with minimal changes, significantly reducing development time and costs. Supported platforms include Windows, macOS, Linux, iOS, Android, WebGL, and various game consoles. Unity uses C# as its primary scripting language, which is popular among developers for its ease of use and robust features. The engine also supports visual scripting through its Visual Scripting tool (formerly Bolt), allowing for the creation of game logic without traditional coding. The Unity Editor is the central tool for developing with Unity. It provides a visual, drag-and-drop interface for building game scenes, along with various windows and tools for managing assets, configuring game objects, and previewing the game. Unity\'s Asset Store is another significant feature, offering a marketplace where developers can find, buy, and sell assets such as 3D models, textures, animations, and entire project templates. This can significantly speed up development, especially for smaller teams or indie developers. For graphics, Unity supports both forward and deferred rendering paths, physically based rendering (PBR), global illumination, and post-processing effects. It also includes tools for creating and editing shaders, allowing for custom visual effects. Unity\'s animation system, Mecanim, provides powerful tools for creating and managing animations. It supports features like inverse kinematics, blend trees, and state machines, allowing for complex character animations. The engine also includes a robust physics engine, allowing for realistic simulations of physical interactions in games. Unity has strong support for AR (Augmented Reality) and VR (Virtual Reality) development, with specific tools and optimizations for these platforms. This has made Unity a popular choice for developing immersive experiences beyond traditional gaming. In recent years, Unity has put significant effort into improving its capabilities for high-end, AAA game development. Features like the Scriptable Render Pipeline allow for more control over the rendering process, enabling highly optimized graphics for top-tier games. Unity uses a component-based architecture, where game objects are built up from multiple components. This modular approach allows for flexible and reusable game design. The engine also supports a data-oriented design through its Entity Component System (ECS), which can provide significant performance improvements for games with many active objects. While Unity is powerful, it does have some limitations. Very large or complex projects can sometimes face performance issues within the editor. Additionally, while Unity games can achieve high levels of graphical fidelity, reaching the cutting edge of graphics often requires more work compared to some other engines. Unity operates on a freemium model, with a free Personal edition available for individuals and small companies, and paid plans offering additional features and support for larger teams and companies. Proficiency in Unity is a valuable skill in the job market, not just for game development but also for roles in visualization, simulation, and interactive media across various industries. As gaming and interactive media continue to grow, Unity remains a key technology in this space, continually evolving to meet the needs of developers and the changing technological landscape.',
		logo: Assets.Unity,
		name: 'Unity',
		category: 'game'
	}),
	defineSkill({
		slug: 'unreal',
		color: 'black',
		description: 'Unreal Engine is a powerful and versatile game engine developed by Epic Games. First released in 1998, it has evolved significantly over the years and is now one of the leading engines in the gaming industry, known for its high-fidelity graphics and robust toolset. While primarily used for game development, Unreal Engine has also found applications in film and television production, architecture visualization, and other industries requiring high-quality real-time 3D rendering. Unreal Engine is particularly known for its graphical capabilities. It supports advanced rendering techniques such as global illumination, ray tracing, and physically based rendering (PBR). These features allow developers to create stunningly realistic environments and characters. The engine uses a forward+ rendering path, which combines the advantages of forward and deferred rendering. One of Unreal Engine\'s key features is its visual scripting system called Blueprint. Blueprint allows developers and designers to create game logic and behaviors without writing traditional code. This visual approach to programming has made game development more accessible to non-programmers while also serving as a rapid prototyping tool for experienced developers. For those who prefer traditional coding, Unreal Engine uses C++ as its primary programming language. The engine\'s source code is openly available, allowing developers to modify and extend the engine\'s capabilities as needed. This openness has contributed to Unreal\'s flexibility and wide adoption. Unreal Engine includes a comprehensive set of tools for various aspects of game development. The Unreal Editor is the primary interface for creating games, providing a WYSIWYG (What You See Is What You Get) environment for building and editing game levels. Other tools include Persona for character animation, Cascade for particle systems, and Sequencer for cinematic creation. The engine\'s material editor is particularly powerful, allowing for the creation of complex shaders through a node-based interface. This enables developers to create a wide range of visual effects without needing to write shader code directly. Unreal Engine supports a wide range of platforms, including PC, consoles, mobile devices, and VR/AR systems. Its cross-platform capabilities allow developers to create games once and deploy them to multiple platforms with minimal changes. For large open-world games, Unreal Engine offers features like World Composition and Level Streaming, which allow for the efficient management and streaming of large game worlds. The engine also includes robust networking capabilities for multiplayer game development. In recent years, Unreal Engine has made significant strides in real-time ray tracing, partnering with NVIDIA to integrate RTX technology. This has pushed the boundaries of real-time graphics, allowing for more realistic lighting, reflections, and shadows. Unreal Engine\'s Marketplace, similar to Unity\'s Asset Store, provides a platform for developers to buy and sell assets, tools, and plugins. This ecosystem can significantly speed up development by providing ready-made assets and solutions. While Unreal Engine is extremely powerful, it can have a steeper learning curve compared to some other engines, particularly for those new to game development. Its high-end graphics capabilities also mean that it can be more demanding in terms of hardware requirements. Unreal Engine operates on a royalty model, where it\'s free to use but Epic Games takes a percentage of revenue if a product makes over a certain amount. This model has made it accessible to indie developers while still being viable for AAA game development. Proficiency in Unreal Engine is highly valued in the game development industry, particularly for roles involving high-end 3D games. It\'s also increasingly valued in fields like film and television production, particularly with the rise of virtual production techniques. As the demand for high-fidelity real-time 3D graphics continues to grow across various industries, Unreal Engine remains at the forefront, continually pushing the boundaries of what\'s possible in real-time rendering and interactive experiences.',
		logo: Assets.Unreal,
		name: 'Unreal Engine',
		category: 'game'
	}),
	defineSkill({
		slug: 'ai',
		color: 'purple',
		description: 'Artificial Intelligence (AI) is a branch of computer science that aims to create intelligent machines that can perform tasks that typically require human intelligence. These tasks include visual perception, speech recognition, decision-making, language translation, and problem-solving. AI has become one of the most transformative technologies of the 21st century, with applications spanning across nearly every industry. At its core, AI involves creating algorithms and systems that can learn from and make decisions based on data. This often involves machine learning, where systems improve their performance on a specific task through experience, and deep learning, a subset of machine learning based on artificial neural networks inspired by the human brain. There are several key approaches and technologies within AI: 1) Machine Learning: This involves algorithms that can learn from and make predictions or decisions based on data. It includes supervised learning (learning from labeled data), unsupervised learning (finding patterns in unlabeled data), and reinforcement learning (learning through interaction with an environment). 2) Deep Learning: A subset of machine learning based on artificial neural networks with multiple layers. Deep learning has been particularly successful in areas like image and speech recognition, natural language processing, and game playing. 3) Natural Language Processing (NLP): This involves the interaction between computers and humans using natural language. NLP is used in applications like chatbots, language translation, and sentiment analysis. 4) Computer Vision: This field deals with how computers can gain high-level understanding from digital images or videos. It\'s used in facial recognition, autonomous vehicles, and medical image analysis. 5) Robotics: AI is crucial in robotics, enabling robots to perceive their environment, make decisions, and perform tasks. 6) Expert Systems: These are AI systems that emulate the decision-making ability of a human expert in a specific domain. AI has found applications in numerous fields. In healthcare, it\'s used for disease diagnosis, drug discovery, and personalized treatment plans. In finance, AI algorithms are used for fraud detection, algorithmic trading, and credit scoring. In transportation, AI is fundamental to the development of self-driving cars. In retail, AI powers recommendation systems and inventory management. In manufacturing, it\'s used for predictive maintenance and quality control. The field of AI also encompasses several important subfields and related areas: 1) Knowledge Representation and Reasoning: This involves representing information about the world in a form that a computer system can use to solve complex tasks. 2) Planning and Decision Making: AI systems that can create and execute plans to achieve specific goals. 3) Cognitive Computing: Systems that aim to simulate human thought processes. 4) Generative AI: AI systems that can create new content, including text, images, and even code. While AI has made significant strides, it also faces several challenges and ethical considerations. These include issues of bias in AI systems, privacy concerns related to data used to train AI, the potential impact on employment as AI automates more tasks, and ensuring AI systems are transparent and explainable. There\'s also ongoing debate about the potential risks and benefits of artificial general intelligence (AGI) and artificial superintelligence (ASI). As AI continues to advance, it\'s likely to have an increasingly profound impact on society, economy, and daily life. For developers and IT professionals, understanding AI and its various subfields is becoming increasingly important across many roles and industries. Whether it\'s integrating AI capabilities into applications, working with big data, or developing AI algorithms, proficiency in AI-related skills is highly valued in today\'s job market.',
		logo: Assets.AI,
		name: 'Artificial Intelligence',
		category: 'ai-ml'
	}),
	defineSkill({
		slug: 'machine-learning',
		color: 'green',
		description: 'Machine Learning (ML) is a subset of Artificial Intelligence that focuses on the development of algorithms and statistical models that enable computer systems to improve their performance on a specific task through experience. In essence, machine learning allows computers to learn without being explicitly programmed. It has become one of the most transformative technologies of the 21st century, with applications spanning across numerous industries and domains. At its core, machine learning involves creating and implementing algorithms that can learn patterns from data and use these patterns to make predictions or decisions. The process typically involves several steps: data collection, data preparation, model selection, model training, model evaluation, and deployment. There are three main types of machine learning: 1) Supervised Learning: In this approach, the algorithm is trained on a labeled dataset, where the desired output is known. The algorithm learns to map inputs to outputs based on example input-output pairs. Common tasks include classification (predicting a category) and regression (predicting a continuous value). 2) Unsupervised Learning: Here, the algorithm is given unlabeled data and must find patterns and relationships within it. Common tasks include clustering (grouping similar data points) and dimensionality reduction (reducing the number of variables in a dataset). 3) Reinforcement Learning: In this approach, an agent learns to make decisions by taking actions in an environment to maximize some notion of cumulative reward. This is often used in game playing and robotics. Machine learning algorithms come in many forms, including: - Decision Trees and Random Forests: Used for both classification and regression tasks. - Support Vector Machines (SVM): Effective for classification tasks, especially in high-dimensional spaces. - Neural Networks and Deep Learning: Inspired by the human brain, these are particularly effective for complex tasks like image and speech recognition. - K-Means Clustering: An unsupervised learning algorithm used for clustering tasks. - Principal Component Analysis (PCA): Used for dimensionality reduction. - Gradient Boosting Algorithms: Like XGBoost and LightGBM, known for their performance in competitions and real-world applications. Machine learning has found applications in numerous fields: - Healthcare: For disease diagnosis, drug discovery, and personalized medicine. - Finance: In fraud detection, algorithmic trading, and credit scoring. - Marketing: For customer segmentation and personalized recommendations. - Autonomous Vehicles: In object detection, path planning, and decision making. - Natural Language Processing: Powering chatbots, translation services, and sentiment analysis. - Computer Vision: In facial recognition, image classification, and object detection. The field of machine learning is closely related to and often overlaps with several other areas: - Data Science: ML is a key component of data science, which also involves data analysis, statistics, and domain expertise. - Big Data: Machine learning algorithms often work with large datasets, making big data technologies crucial. - Artificial Intelligence: ML is a subset of AI, providing the learning capabilities that make many AI systems "intelligent". - Deep Learning: A subset of machine learning based on artificial neural networks with multiple layers. While machine learning has made significant advancements, it also faces several challenges: - Data Quality and Quantity: ML models often require large amounts of high-quality data to perform well. - Interpretability: Many ML models, especially deep learning models, are often seen as "black boxes", making it difficult to understand how they arrive at their decisions. This can be problematic in fields like healthcare or finance where decision transparency is crucial. - Bias: ML models can inadvertently learn and amplify biases present in their training data, leading to unfair or discriminatory outcomes. - Generalization: Ensuring that models perform well on new, unseen data and don\'t overfit to their training data is an ongoing challenge. - Computational Resources: Training complex ML models, especially deep learning models, can require significant computational power. As machine learning continues to advance, new areas of research and application are constantly emerging. These include federated learning (where models are trained across multiple decentralized devices), few-shot and zero-shot learning (where models can learn from very few examples or even no examples of a new class), and AutoML (the automation of the machine learning pipeline). For developers and data scientists, proficiency in machine learning involves not only understanding the theoretical foundations but also practical skills in programming (often in languages like Python or R), data manipulation, and using ML libraries and frameworks like scikit-learn, TensorFlow, and PyTorch. As the field continues to evolve rapidly, staying updated with the latest advancements and techniques is crucial. Machine learning remains one of the most exciting and rapidly growing fields in technology, with the potential to revolutionize numerous aspects of our lives and work.',
		logo: Assets.MachineLearning,
		name: 'Machine Learning',
		category: 'ai-ml'
	}),
	defineSkill({
		slug: 'deep-learning',
		color: 'blue',
		description: 'Deep Learning is a subset of machine learning that is inspired by the structure and function of the human brain, specifically the interconnected neurons that form neural networks. It is part of a broader family of machine learning methods based on artificial neural networks with representation learning. Deep learning has revolutionized the field of artificial intelligence, enabling significant breakthroughs in areas such as computer vision, natural language processing, speech recognition, and game playing. At its core, deep learning uses artificial neural networks with multiple layers (hence "deep") to progressively extract higher-level features from raw input. For example, in image processing, lower layers might identify edges, while higher layers might identify concepts relevant to a human such as digits or letters or faces. The key aspect of deep learning is that these layers of features are not designed by human engineers, but learned from data using a general-purpose learning procedure. Deep learning models are typically composed of several key components: 1) Neural Networks: The foundation of deep learning, neural networks consist of interconnected nodes (neurons) organized in layers. 2) Activation Functions: These introduce non-linearity into the network, allowing it to learn complex patterns. Common activation functions include ReLU, sigmoid, and tanh. 3) Loss Functions: These measure how well the network\'s predictions match the true values during training. 4) Optimization Algorithms: These adjust the network\'s parameters to minimize the loss function. Gradient descent and its variants are commonly used. 5) Regularization Techniques: These help prevent overfitting, allowing the model to generalize well to new data. There are several types of deep learning architectures, each suited to different types of tasks: 1) Feedforward Neural Networks: The simplest type of artificial neural network, where information moves in only one direction, from input to output. 2) Convolutional Neural Networks (CNNs): Particularly effective for processing grid-like data such as images. CNNs have been revolutionary in computer vision tasks. 3) Recurrent Neural Networks (RNNs): Suited for sequential data like time series or natural language. Long Short-Term Memory (LSTM) networks are a popular type of RNN. 4) Transformer Networks: Originally designed for natural language processing tasks, transformers have become increasingly popular for a wide range of sequence-to-sequence tasks. 5) Generative Adversarial Networks (GANs): Consist of two networks, a generator and a discriminator, that are trained simultaneously through adversarial training. GANs are particularly good at generating new, synthetic instances of data. 6) Autoencoders: Used for unsupervised learning of efficient codings, often for the purpose of dimensionality reduction or generative modeling. Deep learning has achieved remarkable results in various domains: - Computer Vision: Including image classification, object detection, and image generation. - Natural Language Processing: Powering machine translation, sentiment analysis, and text generation. - Speech Recognition: Enabling voice assistants and transcription services. - Game Playing: Achieving superhuman performance in complex games like Go and chess. - Drug Discovery: Predicting molecular properties and interactions. - Autonomous Vehicles: Processing sensor data and making driving decisions. Despite its power, deep learning also faces several challenges: - Data Requirements: Deep learning models often require large amounts of labeled data to train effectively. - Computational Intensity: Training deep models can be computationally expensive and time-consuming. - Interpretability: Deep learning models are often seen as "black boxes", making it difficult to understand their decision-making process. - Adversarial Attacks: Deep learning models can be vulnerable to carefully crafted inputs designed to fool them. The field of deep learning is rapidly evolving, with new architectures and techniques continually being developed. Some current areas of research include: - Few-shot and Zero-shot Learning: Enabling models to learn from very few examples or even no examples of a new class. - Unsupervised and Self-supervised Learning: Reducing the need for large amounts of labeled data. - Neuromorphic Computing: Developing hardware that\'s optimized for neural networks. - Ethical AI: Addressing issues of bias, fairness, and transparency in deep learning systems. For developers and data scientists, working with deep learning typically involves using frameworks like TensorFlow, PyTorch, or Keras. Proficiency in deep learning requires not only understanding the theoretical foundations but also practical skills in implementing and training neural networks, data preprocessing, and model evaluation. As deep learning continues to advance and find new applications, it remains one of the most exciting and rapidly growing fields in artificial intelligence and computer science.',
		logo: Assets.DeepLearning,
		name: 'Deep Learning',
		category: 'ai-ml'
	}),
	defineSkill({
		slug: 'photoshop',
		color: 'blue',
		description: 'Adobe Photoshop is a raster graphics editor developed and published by Adobe Inc. for Windows and macOS. It was originally created in 1988 by Thomas and John Knoll and has since become the industry standard not only in raster graphics manipulation, but in digital art as a whole. Photoshop\'s name has become a verb, "to photoshop", synonymous with image editing in popular culture. Photoshop offers a wide range of tools and features for image editing, graphic design, and digital art creation: 1) Layer-based Editing: This is one of Photoshop\'s core features, allowing users to work on different elements of an image separately. 2) Selection Tools: Including the marquee tool, lasso tool, and magic wand tool, these allow users to select specific parts of an image for editing. 3) Brush Tools: For painting, erasing, and retouching images. 4) Type Tools: For adding and manipulating text in various fonts and styles. 5) Shape Tools: For creating and editing vector shapes. 6) Adjustment Tools: Including levels, curves, brightness/contrast, and hue/saturation for fine-tuning image colors and tones. 7) Filters: A wide range of effects that can be applied to images, from blur and sharpen to stylistic effects. 8) Smart Objects: Allow for non-destructive editing of layers. 9) Content-Aware Tools: For intelligent filling and moving of image content. 10) 3D Capabilities: For creating and editing 3D models and scenes. 11) Video Editing: Basic video editing capabilities have been added in recent versions. Photoshop is used across a wide range of industries and applications: - Photography: For photo retouching, color correction, and compositing. - Graphic Design: For creating logos, marketing materials, and digital illustrations. - Web Design: For designing website layouts and user interfaces. - Film and Television: For creating concept art, matte paintings, and visual effects. - Fashion: For retouching fashion photography and creating textile designs. - Architecture: For creating and editing architectural visualizations. - Publishing: For preparing images for print and digital publication. - Game Development: For creating textures and concept art. Photoshop integrates well with other Adobe Creative Cloud applications, allowing for seamless workflows between different aspects of digital creation. It supports a wide range of file formats, including its native PSD and PSB formats, which preserve layers and editing information. The software also supports a plugin architecture, allowing third-party developers to extend its functionality. Recent versions of Photoshop have incorporated artificial intelligence through Adobe Sensei, enabling features like automatic subject selection, sky replacement, and neural filters. These AI-powered tools are making complex editing tasks more accessible to users of all skill levels. While Photoshop is powerful, it can have a steep learning curve, particularly for new users. However, Adobe provides extensive documentation, tutorials, and a large user community that shares knowledge and resources. Photoshop is available through Adobe\'s Creative Cloud subscription service, which provides regular updates and cloud storage integration. There are different versions available, including Photoshop Elements, a simplified version for casual users, and Photoshop Lightroom, which is focused on photography workflows. For professionals in many creative fields, proficiency in Photoshop is often considered an essential skill. Its versatility and power make it a fundamental tool in digital imaging and design. As digital visual content continues to grow in importance across various media and platforms, Photoshop remains a key technology in the creation and manipulation of digital imagery.',
		logo: Assets.Photoshop,
		name: 'Adobe Photoshop',
		category: 'design'
	}),
	defineSkill({
		slug: 'illustrator',
		color: 'orange',
		description: 'Adobe Illustrator is a vector graphics editor and design program developed and marketed by Adobe Inc. Originally designed for the Apple Macintosh, development of Adobe Illustrator began in 1985. Along with Creative Cloud, it is currently marketed as part of the Adobe Creative Suite. Illustrator is widely recognized as the industry-standard vector graphics software, used by graphic designers, visual artists, and illustrators worldwide. At its core, Illustrator works with vector graphics. Unlike raster graphics, which are based on pixels, vector graphics are based on mathematical formulas that define geometric primitives such as points, lines, curves, and shapes. This means that vector graphics can be scaled to any size without loss of quality, making Illustrator ideal for creating logos, icons, typography, and illustrations that may need to be used at various sizes. Key features of Adobe Illustrator include: 1) Pen Tool: The primary tool for creating precise, smooth vector paths. 2) Shape Tools: For creating basic shapes like rectangles, ellipses, and polygons. 3) Type Tools: For creating and manipulating text, including text on a path and text in shapes. 4) Pathfinder: For combining and manipulating shapes in various ways. 5) Live Trace: For converting raster images into vector graphics. 6) Gradient Mesh: For creating complex, multi-colored gradients. 7) Perspective Grid: For creating and manipulating objects in perspective. 8) Artboards: Multiple artboards in a single document for creating various layouts or versions of a design. 9) Symbols: For creating and reusing design elements efficiently. 10) Graphic Styles: For saving and applying combinations of appearance attributes. 11) Color Management: Including support for Pantone colors and other color systems. 12) 3D Effects: For creating three-dimensional objects from 2D artwork. Illustrator is used in a wide range of industries and applications: - Logo Design: For creating scalable, print-ready logos. - Brand Identity: For developing comprehensive brand guidelines and assets. - Packaging Design: For creating product packaging and labels. - Editorial Illustration: For magazines, books, and digital publications. - Icon Design: For creating app icons, web icons, and user interface elements. - Infographic Design: For creating data visualizations and informational graphics. - Fashion Design: For creating technical drawings and pattern designs. - Map Making: For creating custom maps and location graphics. - Signage and Wayfinding: For creating large-scale graphics for public spaces. Illustrator integrates seamlessly with other Adobe Creative Cloud applications, allowing for efficient workflows between different aspects of design projects. It supports a wide range of file formats, including its native AI format, as well as SVG, EPS, and PDF, which are widely used in the design and printing industries. The software also supports a plugin architecture, allowing third-party developers to extend its functionality. Recent versions of Illustrator have incorporated more features for digital and web design, including the ability to export designs for web and mobile platforms. It also includes features for collaboration and cloud storage through Creative Cloud. While Illustrator is powerful, it can have a learning curve, particularly for those new to vector graphics. However, Adobe provides extensive documentation, tutorials, and a large user community that shares knowledge and resources. Illustrator is available through Adobe\'s Creative Cloud subscription service, which provides regular updates and cloud storage integration. For professionals in graphic design, illustration, and many other creative fields, proficiency in Illustrator is often considered an essential skill. Its precision and scalability make it indispensable for creating high-quality graphics for both print and digital media. As the demand for visual communication continues to grow across various industries, Illustrator remains a key tool in the creation of vector graphics and illustrations.',
		logo: Assets.Illustrator,
		name: 'Adobe Illustrator',
		category: 'design'
	}),
	defineSkill({
		slug: 'indesign',
		color: 'pink',
		description: 'Adobe InDesign is a desktop publishing and typesetting software application produced by Adobe Inc. It can be used to create works such as posters, flyers, brochures, magazines, newspapers, presentations, books and ebooks. First released in 1999, InDesign has become the industry standard for layout and page design for print and digital media. InDesign is part of the Adobe Creative Cloud, which allows it to integrate seamlessly with other Adobe applications like Photoshop and Illustrator. Key features of Adobe InDesign include: 1) Page Layout Tools: InDesign offers a comprehensive set of tools for precise control over page layouts, including guides, grids, and smart guides. 2) Master Pages: These allow users to create consistent layouts across multiple pages. 3) Paragraph and Character Styles: For consistent and easily updatable text formatting. 4) Object Styles: Similar to text styles, but for design elements. 5) Advanced Typography: InDesign provides fine control over typography, including kerning, tracking, and OpenType features. 6) Tables: Tools for creating and formatting complex tables. 7) Interactive PDFs: Ability to create PDFs with interactive elements like buttons, hyperlinks, and media. 8) Digital Publishing: Features for creating digital publications, including support for fixed-layout EPUB. 9) Data Merge: For creating personalized documents from databases. 10) Long Document Features: Tools for managing long documents, including table of contents, indexing, and cross-references. 11) Collaboration Tools: Integration with Adobe Creative Cloud for team collaboration. 12) Preflight: Built-in tools for checking documents for potential printing issues. InDesign is used in a variety of industries and applications: - Publishing: For creating books, magazines, and newspapers. - Marketing: For designing brochures, flyers, and other marketing materials. - Corporate Communications: For annual reports, company newsletters, and presentations. - Packaging Design: For creating packaging layouts and dielines. - Digital Publishing: For creating ebooks and interactive digital publications. - Education: For creating textbooks and educational materials. One of InDesign\'s strengths is its ability to handle long, complex documents. Its book feature allows users to combine multiple InDesign files into a single project, making it ideal for managing large publications. InDesign also excels in its typography features. It offers advanced control over text, including OpenType support, optical margin alignment, and paragraph composer for optimizing line breaks. The software supports a wide range of file formats, including its native INDD format, as well as IDML for backwards compatibility, and the ability to export to PDF, EPUB, and HTML. InDesign\'s scripting capabilities allow for automation of repetitive tasks, which can be particularly useful in production environments. Recent versions of InDesign have expanded its digital publishing capabilities. The software now includes tools for creating fixed-layout EPUBs, interactive PDFs, and publications for tablet devices. It also integrates with Adobe\'s Digital Publishing Suite for creating tablet applications. While InDesign is powerful, it can have a learning curve, particularly for those new to desktop publishing. However, Adobe provides extensive documentation, tutorials, and a large user community that shares knowledge and resources. InDesign is available through Adobe\'s Creative Cloud subscription service, which provides regular updates and cloud storage integration. For professionals in publishing, graphic design, and marketing, proficiency in InDesign is often considered an essential skill. Its robust features for both print and digital publishing make it a versatile tool for creating a wide range of publications. As the publishing industry continues to evolve, with increasing emphasis on digital formats, InDesign remains a key tool in bridging the gap between print and digital publishing.',
		logo: Assets.InDesign,
		name: 'Adobe InDesign',
		category: 'design'
	}),
	defineSkill({
		slug: 'after-effects',
		color: 'purple',
		description: 'Adobe After Effects is a digital visual effects, motion graphics, and compositing application developed by Adobe Inc. First released in 1993, it has become an industry standard for video post-production, creating motion graphics and visual effects for film, TV, video, and the web. After Effects is part of the Adobe Creative Cloud, allowing for seamless integration with other Adobe applications like Premiere Pro, Photoshop, and Illustrator. Key features of Adobe After Effects include: 1) Composition: The ability to layer multiple pieces of footage, images, and audio. 2) Keyframe Animation: For creating motion by changing properties over time. 3) Effects: A wide range of built-in effects for altering footage, from basic color corrections to complex particle systems. 4) 3D Capability: The ability to work with 3D layers and create 3D compositions. 5) Motion Tracking: Tools for tracking motion in footage and applying that motion to other elements. 6) Rotoscoping: Tools for cutting out objects from footage frame by frame. 7) Shape Layers: Vector-based layers for creating and animating shapes. 8) Text Animation: Powerful tools for creating and animating text. 9) Expressions: A scripting language for creating complex animations and automating tasks. 10) Puppet Tool: For easily animating characters and objects. 11) Camera Tools: For creating and animating virtual cameras in 3D space. 12) Rendering and Output: Support for various output formats and rendering engines. After Effects is used in a wide range of industries and applications: - Film and Television: For creating visual effects, title sequences, and motion graphics. - Advertising: For creating animated commercials and promotional content. - Web Design: For creating animated web content and interfaces. - Mobile App Design: For creating animations and transitions for mobile apps. - Motion Graphics: For creating animated infographics and explanatory videos. - Game Development: For creating game trailers and in-game cinematics. - Virtual Reality: For creating 360-degree video content. One of After Effects\' strengths is its extensibility. It supports a wide range of third-party plugins that can add new features and effects. The software also has a robust scripting environment, allowing users to create their own tools and automate complex tasks. After Effects\' integration with other Adobe software is a key feature. It works particularly well with Premiere Pro for video editing workflows, allowing editors to easily send compositions between the two programs. It can also import files from Photoshop and Illustrator, preserving layers and other properties. The software supports a wide range of file formats and codecs, making it versatile for various workflows. It can work with everything from standard video formats to image sequences and 3D renders. Recent versions of After Effects have focused on improving performance and adding new creative tools. Features like Content-Aware Fill for video, which can remove unwanted objects from footage, and the Advanced Puppet tool for more complex character animations, have expanded the software\'s capabilities. After Effects also now includes integration with Cinema 4D Lite, allowing for basic 3D modeling and animation directly within After Effects. While After Effects is powerful, it can have a steep learning curve, particularly for those new to motion graphics and compositing. However, Adobe provides extensive documentation, tutorials, and a large user community that shares knowledge and resources. After Effects is available through Adobe\'s Creative Cloud subscription service, which provides regular updates and cloud storage integration. For professionals in video production, motion graphics, and visual effects, proficiency in After Effects is often considered an essential skill. Its versatility makes it useful for a wide range of visual projects, from simple animated logos to complex visual effects sequences. As demand for video content continues to grow across various media platforms, After Effects remains a key tool in the creation of engaging visual content.',
		logo: Assets.AfterEffects,
		name: 'Adobe After Effects',
		category: 'design'
	}),
	defineSkill({
		slug: 'selenium',
		color: 'green',
		description: 'Selenium is a powerful suite of tools specifically designed for automating web browsers. Created by Jason Huggins in 2004, Selenium has become the de facto standard for browser automation and is widely used for web application testing. The Selenium project consists of several components, each catering to different testing needs and styles. Key components of Selenium include: 1) Selenium WebDriver: The core component that provides a programming interface to control browser behavior. It supports multiple programming languages including Java, Python, C#, Ruby, and JavaScript. 2) Selenium IDE (Integrated Development Environment): A browser extension that allows for recording, editing, and debugging tests. It\'s particularly useful for creating quick tests and for those new to test automation. 3) Selenium Grid: Allows running tests in parallel across different machines and browsers simultaneously, significantly reducing the time required for test execution. Key features of Selenium include: 1) Cross-Browser Testing: Selenium supports all major browsers including Chrome, Firefox, Safari, and Edge. 2) Multiple Language Support: Tests can be written in various programming languages, allowing developers and testers to use their preferred language. 3) OS Independence: Selenium can run on various operating systems including Windows, macOS, and Linux. 4) Reusable Code: Selenium allows for the creation of reusable code, improving efficiency in test creation and maintenance. 5) Integration with Testing Frameworks: Selenium integrates well with testing frameworks like JUnit, TestNG, and others, allowing for more structured and comprehensive testing. 6) Support for Mobile Testing: Through tools like Appium (built on Selenium), it\'s possible to automate mobile application testing. 7) Parallel Execution: With Selenium Grid, tests can be run in parallel, significantly reducing execution time. 8) Headless Browser Testing: Selenium supports headless browser testing, which can be faster and is useful in CI/CD pipelines. Selenium is widely used in various contexts: - Web Application Testing: For automating functional and regression testing of web applications. - Continuous Integration/Continuous Deployment (CI/CD): As part of automated testing in CI/CD pipelines. - Web Scraping: While not its primary purpose, Selenium is sometimes used for web scraping tasks. - Browser-based Performance Testing: For measuring load times and other performance metrics. While Selenium is powerful, it does have some limitations: - It\'s specifically for web applications and cannot be used for testing desktop applications. - Setting up and maintaining Selenium tests can be complex, especially for large test suites. - Selenium tests can be brittle, breaking when the application\'s UI changes. - It may struggle with certain web elements like captchas, shadow DOM, or elements that load dynamically. To address some of these limitations, many teams use Selenium in conjunction with other tools and frameworks. For example, tools like Selenium Wire can help with network interception, while frameworks like Cucumber can be used with Selenium to implement Behavior Driven Development (BDD). Selenium is open-source and available under the Apache 2.0 license. It has a large and active community, which means extensive documentation, resources, and third-party tools are available. For developers and QA professionals, proficiency in Selenium is often considered a crucial skill in web development and testing roles. As web applications continue to grow in complexity and importance, and as automated testing becomes increasingly integral to software development processes, tools like Selenium that facilitate comprehensive and efficient web testing are likely to remain important in the software development ecosystem.',
		logo: Assets.Selenium,
		name: 'Selenium',
		category: 'test'
	}),
	defineSkill({
		slug: 'redis',
		color: 'red',
		description: 'Redis (Remote Dictionary Server) is an open-source, in-memory data structure store that can be used as a database, cache, message broker, and queue. Created by Salvatore Sanfilippo and first released in 2009, Redis has become one of the most popular NoSQL databases due to its performance, flexibility, and wide range of use cases. Key features of Redis include: 1) In-Memory Data Store: Redis keeps its entire dataset in memory, enabling extremely fast read and write operations. 2) Persistence: While Redis is an in-memory database, it supports persistence by periodically saving the dataset to disk. 3) Data Structures: Redis supports various data structures including strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperlog logs, and geospatial indexes. 4) Replication: Redis supports master-slave replication, allowing easy scalability and high availability. 5) Transactions: Redis supports transactions, allowing the execution of a group of commands in a single step. 6) Pub/Sub: Redis has a Publish/Subscribe messaging paradigm, making it useful for real-time applications. 7) Lua Scripting: Redis has built-in Lua scripting capabilities, allowing for complex operations to be performed efficiently. 8) TTL for Keys: Redis allows setting a time to live (TTL) for keys, after which they are automatically deleted. 9) Atomic Operations: Redis operations are atomic, even when operating on complex data structures. 10) Cluster Mode: Redis Cluster provides a way to run a Redis installation where data is automatically sharded across multiple Redis nodes. Redis is used in a wide variety of scenarios: - Caching: Redis is often used as a cache to improve application performance by storing frequently accessed data in memory. - Session Storage: Its speed makes Redis an excellent choice for storing session data in web applications. - Real-time Analytics: Redis\'s data structures and speed make it suitable for real-time analytics and counting. - Leaderboards and Counting: Sorted sets in Redis are perfect for implementing leaderboards. - Queues: Redis lists can be used to implement lightweight task queues. - Real-time Communication: The Pub/Sub feature makes Redis useful for chat applications, real-time notifications, and other real-time communication scenarios. - Rate Limiting: Redis can be used to implement rate limiting in APIs. While Redis offers many advantages, it\'s important to note some considerations: - As an in-memory database, Redis can be more expensive in terms of hardware costs for large datasets. - The entire dataset needs to fit in memory, which can be a limitation for some use cases. - While Redis does offer persistence options, it\'s generally not used as a sole primary database for applications that require strong durability guarantees. Redis is open-source and available under the BSD license. It\'s written in ANSI C and works in most POSIX systems like Linux, *BSD, and OS X without external dependencies. Redis can be used with most programming languages through various client libraries. For developers, particularly those working on applications that require high performance and low latency data access, proficiency in Redis can be a valuable skill. As applications continue to demand real-time responsiveness and the ability to handle large volumes of data quickly, databases like Redis that excel in these areas are likely to remain important in the software development ecosystem.',
		logo: Assets.Redis,
		name: 'Redis',
		category: 'db'
	}),
	defineSkill({
		slug: 'quasar',
		color: 'cyan',
		description: 'Quasar is an open-source Vue.js based framework that allows developers to quickly create responsive websites, progressive web apps (PWAs), and mobile and desktop apps, all from a single codebase. Created by Razvan Stoenescu and first released in 2016, Quasar has gained popularity for its comprehensive set of Vue.js components and its ability to build for multiple platforms. Key features of Quasar include: 1) Cross-Platform Development: With Quasar, you can build for Web (SPA, SSR, PWA), Mobile (Android, iOS with Cordova), and Desktop (using Electron) all from the same codebase. 2) Vue.js Based: Quasar is built on top of Vue.js, leveraging its reactivity system and component-based architecture. 3) Comprehensive Component Library: Quasar provides a large set of high-quality, customizable Vue components out of the box. 4) Material Design Implementation: Quasar components follow Material Design specifications, but can be easily customized. 5) Responsive Design: Quasar\'s components and layout system are designed to be responsive out of the box. 6) CLI with Hot-Reload: Quasar comes with a powerful CLI that supports hot-reload, allowing for rapid development. 7) RTL Support: Quasar has built-in support for right-to-left languages. 8) Icon Libraries: Integrated support for Material Icons, Font Awesome, and Ionicons. 9) Quasar Language Packs: Easy internationalization support. 10) Sass/SCSS Support: Quasar allows the use of Sass/SCSS for styling. 11) Performance Focused: Quasar is designed with performance in mind, offering features like tree shaking out of the box. 12) Extensive Documentation: Quasar provides comprehensive documentation and guides. Quasar is particularly well-suited for several scenarios: - Rapid Prototyping: With its comprehensive component library, Quasar allows for quick development of prototypes and MVPs. - Cross-Platform Applications: For projects that need to target multiple platforms (web, mobile, desktop) from a single codebase. - Progressive Web Apps: Quasar provides excellent support for building PWAs. - Enterprise Applications: Quasar\'s component library and build tools make it suitable for large-scale enterprise applications. While Quasar offers many advantages, it\'s worth noting some considerations: - Learning Curve: While Quasar simplifies many aspects of development, it does have its own concepts and conventions that developers need to learn. - Opinionated: Quasar provides a full-stack solution, which can be limiting if you prefer more flexibility in your technology choices. - Vue.js Dependency: As Quasar is built on Vue.js, it\'s best suited for developers and projects already invested in the Vue.js ecosystem. Quasar is open-source and available under the MIT license. It can be installed via npm and provides a CLI for easy project setup and management. For developers, particularly those working in the Vue.js ecosystem or those looking to build cross-platform applications, proficiency in Quasar can be a valuable skill. As the demand for cross-platform development and rapid prototyping continues to grow, frameworks like Quasar that facilitate these approaches are likely to remain important in the web and mobile development landscape.',
		logo: Assets.Quasar,
		name: 'Quasar',
		category: 'framework'
	}),
	defineSkill({
		slug: 'premiere',
		color: 'purple',
		description: 'Adobe Premiere Pro is a timeline-based video editing software application developed by Adobe Inc. First launched in 2003, Premiere Pro has become one of the industry-standard tools for professional video editing, widely used in filmmaking, television production, and web video creation. Key features of Adobe Premiere Pro include: 1) Non-Linear Editing: Premiere Pro uses a non-linear editing approach, allowing editors to access any frame in a digital video clip with the same ease as any other. 2) Multi-camera Editing: The software supports editing footage from multiple cameras in real-time. 3) Color Correction and Grading: Premiere Pro includes powerful color correction and grading tools, including the Lumetri Color panel. 4) Audio Editing: While primarily a video editor, Premiere Pro also includes robust audio editing capabilities. 5) Motion Graphics Templates: Users can create and edit motion graphics templates, which can be shared with team members. 6) VR Editing: Premiere Pro supports editing of VR (Virtual Reality) content. 7) Auto Reframe: This AI-powered feature automatically reframes videos for different aspect ratios. 8) Essential Graphics Panel: This feature allows for the creation and animation of titles and graphics within Premiere Pro. 9) Integration with other Adobe Software: Premiere Pro integrates seamlessly with other Adobe Creative Cloud applications like After Effects, Photoshop, and Audition. 10) Proxy Workflow: This feature allows editors to work with lower-resolution copies of their footage for improved performance, especially with 4K and higher resolution content. 11) Team Projects: Collaborative features allow multiple editors to work on the same project simultaneously. 12) Extensive Format Support: Premiere Pro supports a wide range of video formats and codecs. Premiere Pro is used in various scenarios: - Film Editing: From short films to feature-length movies. - Television Production: For editing TV shows, commercials, and other broadcast content. - Web Video: For creating content for platforms like YouTube, Vimeo, and social media. - Corporate Video: For creating training videos, promotional content, and other business-related video material. - Documentary Filmmaking: Its organizational tools make it well-suited for managing large amounts of footage. While Premiere Pro offers many advantages, it\'s worth noting some considerations: - Learning Curve: While powerful, Premiere Pro can be complex and may require significant time to master. - Hardware Requirements: For optimal performance, Premiere Pro requires relatively powerful hardware, especially when working with high-resolution footage. - Cost: As part of Adobe\'s Creative Cloud, Premiere Pro requires a subscription, which may be a significant ongoing expense for some users. Premiere Pro is available as part of Adobe\'s Creative Cloud subscription service, which provides regular updates and cloud storage integration. It\'s available for both Windows and macOS. For video editors and filmmakers, proficiency in Premiere Pro is often considered an essential skill. As video content continues to grow in importance across various media platforms, from traditional film and TV to web and social media, tools like Premiere Pro that offer professional-grade video editing capabilities remain crucial in the content creation ecosystem.',
		logo: Assets.Premiere,
		name: 'Adobe Premiere Pro',
		category: 'design'
	}),
	defineSkill({
		slug: 'postcss',
		color: 'red',
		description: 'PostCSS is a tool for transforming CSS with JavaScript. Created by Andrey Sitnik and first released in 2013, PostCSS has become a popular tool in modern front-end development workflows. Unlike preprocessors like Sass or Less, PostCSS is not a language but a tool for transforming CSS with JavaScript plugins. This approach provides a high degree of flexibility and allows developers to customize their CSS processing pipeline. Key features of PostCSS include: 1) Plugin Architecture: PostCSS itself is very lightweight, with all functionality provided through plugins. This allows developers to use only the features they need. 2) Future CSS Features: PostCSS can be used to polyfill future CSS features, allowing developers to use upcoming CSS syntax today. 3) Autoprefixer: One of the most popular PostCSS plugins, Autoprefixer, automatically adds vendor prefixes to CSS rules. 4) CSS Modules: PostCSS can be used to implement CSS Modules, providing local scope for CSS classes. 5) Linting: PostCSS plugins can provide CSS linting, helping to catch errors and enforce coding standards. 6) Minification: PostCSS can be used to minify CSS, reducing file size. 7) Preprocessing: While not a preprocessor itself, PostCSS can replicate many features of preprocessors like variables and mixins through plugins. 8) Custom Properties: PostCSS can transform custom properties (CSS variables) for broader browser support. 9) Image Processing: Some PostCSS plugins can handle tasks like image inlining or spriting. 10) Source Maps: PostCSS supports source maps, making it easier to debug transformed CSS. PostCSS is used in various scenarios: - Modern Web Development: PostCSS is often used in conjunction with modern JavaScript frameworks and build tools. - Progressive Enhancement: PostCSS can be used to provide fallbacks for newer CSS features in older browsers. - Performance Optimization: Through minification and other optimizations, PostCSS can help improve website performance. - Maintaining Large Stylesheets: PostCSS plugins can help enforce consistency and catch errors in large CSS codebases. While PostCSS offers many advantages, it\'s worth noting some considerations: - Setup Complexity: Configuring PostCSS and choosing the right plugins can be complex, especially for beginners. - Plugin Quality: The quality and maintenance of plugins can vary, as many are community-contributed. - Learning Curve: Understanding how to use and configure various plugins may require some time and effort. PostCSS is open-source and available under the MIT license. It can be installed via npm and integrates well with various build tools and task runners like webpack, Gulp, and Grunt. For front-end developers, particularly those working on large or complex projects, proficiency in PostCSS can be a valuable skill. As web development continues to evolve, with an increasing focus on performance, maintainability, and progressive enhancement, tools like PostCSS that provide flexible and powerful CSS processing capabilities are likely to remain important in the front-end development ecosystem.',
		logo: Assets.Postcss,
		name: 'PostCSS',
		category: 'markup-style'
	}),
	defineSkill({
		slug: 'nuxt',
		color: 'green',
		description: 'Nuxt.js is a free and open source web application framework based on Vue.js, Node.js, Webpack and Babel.js. Inspired by Next.js, a similar framework based on React.js, Nuxt.js was created by Alexandre Chopin and Sébastien Chopin in October 2016. Nuxt.js aims to make web development powerful and performant with a great developer experience. Key features of Nuxt.js include: 1) Server-Side Rendering (SSR): Nuxt.js can render Vue.js applications on the server, improving SEO and initial load times. 2) Static Site Generation (SSG): Nuxt.js can generate static websites, providing the benefits of a static site with the power of a Vue.js application. 3) Automatic Code Splitting: Nuxt.js automatically splits your code for faster page loads. 4) Vue Router Integration: Nuxt.js automatically generates the vue-router configuration based on your file structure. 5) Asynchronous Data: Nuxt.js provides a powerful asyncData method for fetching data on the server side. 6) Vuex Store Integration: Nuxt.js provides a Vuex store that\'s easy to set up and use. 7) Plugin System: Easily extend core functionality with plugins. 8) Modular Architecture: Nuxt.js has a modular architecture that allows you to choose and use only the features you need. 9) Hot Module Replacement: Enjoy instant feedback during development with hot module replacement. 10) SEO Optimization: Nuxt.js provides features like automatic generation of headers and links for better SEO. 11) TypeScript Support: Nuxt.js has built-in TypeScript support. 12) Nuxt Modules: Extend Nuxt.js with modules for tasks like PWA features, Google Analytics integration, and more. Nuxt.js is particularly well-suited for several scenarios: - Server-Side Rendered Vue.js Applications: For projects that require the SEO benefits of server-side rendering. - Static Site Generation: For content-heavy sites that benefit from being served as static files. - Single Page Applications (SPAs): Nuxt.js can also be used to create traditional SPAs. - Progressive Web Apps (PWAs): Nuxt.js has strong support for creating PWAs. - Large-scale Vue.js Applications: Nuxt.js provides a structured framework for building large, complex Vue.js applications. While Nuxt.js offers many advantages, it\'s worth noting some considerations: - Learning Curve: While Nuxt.js simplifies many aspects of Vue.js development, it does introduce its own concepts and conventions that developers need to learn. - Flexibility Trade-off: The opinionated nature of Nuxt.js, while beneficial for consistency and ease of use, may be limiting for projects that require unconventional setups. - Server Requirements: For server-side rendering, you\'ll need a Node.js environment, which may not be available in all hosting situations. Nuxt.js is open-source and available under the MIT license. It can be installed via npm or yarn, and provides a CLI for easy project setup. For developers, particularly those working in the Vue.js ecosystem or those looking to build server-side rendered or statically generated Vue.js applications, proficiency in Nuxt.js can be a valuable skill. As the demand for performant, SEO-friendly web applications continues to grow, frameworks like Nuxt.js that facilitate these approaches while providing a great developer experience are likely to remain important in the web development landscape.',
		logo: Assets.Nuxt,
		name: 'Nuxt.js',
		category: 'framework'
	}),
	defineSkill({
		slug: 'nginx',
		color: 'green',
		description: 'Nginx (pronounced "engine-x") is a powerful, open-source web server software that can also be used as a reverse proxy, load balancer, HTTP cache, and more. First released in 2004 by Igor Sysoev, Nginx has grown to become one of the most popular web servers, known for its high performance, stability, rich feature set, simple configuration, and low resource consumption. Key features of Nginx include: 1) Web Server: Nginx can serve static content quickly and efficiently. 2) Reverse Proxy: It can act as an intermediary for requests from clients, forwarding them to other servers. 3) Load Balancer: Nginx can distribute incoming traffic across multiple servers to ensure no single server becomes overwhelmed. 4) HTTP Cache: It can cache content, reducing the load on upstream servers. 5) SSL/TLS Termination: Nginx can handle SSL/TLS encryption and decryption, offloading this work from application servers. 6) FastCGI Support: For serving dynamic content, Nginx supports the FastCGI protocol. 7) URL Rewriting and Redirection: Nginx provides powerful tools for manipulating URLs. 8) Gzip Compression: It can compress responses before sending them to clients, reducing bandwidth usage. 9) WebSockets Support: Nginx can proxy WebSocket connections. 10) HTTP/2 Support: Nginx supports the HTTP/2 protocol, enabling faster web page loading. 11) Monitoring and Logging: It provides detailed logs and status information for monitoring server health and performance. 12) Security Features: Nginx includes features like rate limiting and access control to help protect against various types of attacks. Nginx is used in various scenarios: - High-Traffic Websites: Its ability to handle many concurrent connections makes it ideal for busy sites. - Microservices Architecture: Nginx is often used as an API gateway in microservices setups. - Content Delivery: Its caching capabilities make it useful in content delivery networks. - Application Delivery: As a reverse proxy, it\'s often used to route requests to application servers. - Static Content Serving: Nginx is very efficient at serving static files. While Nginx offers many advantages, it\'s worth noting some considerations: - Learning Curve: While Nginx configuration is generally considered simpler than some alternatives, it still requires time to master. - Dynamic Content: While Nginx can serve dynamic content through FastCGI or by proxying to application servers, it doesn\'t process dynamic content natively like some other web servers. - Modules: Some features require compiling Nginx with specific modules, which can add complexity to the setup process. Nginx is open-source and available under a 2-clause BSD-like license. It\'s available for Unix, Linux, BSD variants, macOS, Solaris, AIX, HP-UX, and Windows. For system administrators and DevOps professionals, proficiency in Nginx is often considered an essential skill. As web applications continue to grow in complexity and scale, tools like Nginx that can efficiently manage web traffic, improve performance, and enhance security remain crucial in the web infrastructure ecosystem.',
		logo: Assets.Nginx,
		name: 'Nginx',
		category: 'devops'
	}),
	defineSkill({
		slug: 'firebase',
		color: 'yellow',
		description: 'Firebase is a comprehensive mobile and web application development platform provided by Google. Originally an independent company founded in 2011, Firebase was acquired by Google in 2014 and has since become a key part of Google\'s developer offerings. Firebase provides a suite of tools and services designed to help developers build, improve, and grow their apps. Key features of Firebase include: 1) Realtime Database: A cloud-hosted NoSQL database that lets you store and sync data in realtime. 2) Cloud Firestore: A flexible, scalable NoSQL cloud database to store and sync data for client- and server-side development. 3) Authentication: Provides easy-to-use SDKs and ready-made UI libraries to authenticate users to your app. 4) Hosting: Fast and secure web hosting for your static and dynamic content. 5) Cloud Functions: Let you automatically run backend code in response to events triggered by Firebase features and HTTPS requests. 6) Cloud Storage: For storing and serving user-generated content like photos or videos. 7) Crashlytics: A real-time crash reporter that helps you track, prioritize, and fix stability issues. 8) Analytics: Provides insight into app usage and user engagement. 9) Cloud Messaging: A cross-platform messaging solution that lets you reliably send messages at no cost. 10) Performance Monitoring: Helps you gain insight into your app\'s performance issues. 11) Remote Config: Lets you modify your app\'s behavior and appearance without publishing an app update. 12) Dynamic Links: Allows you to create smart URLs that dynamically adapt to different platforms. Firebase is used in various scenarios: - Mobile App Development: Firebase provides a comprehensive backend solution for mobile apps. - Web App Development: Many of Firebase\'s features are also applicable to web applications. - Serverless Architecture: With Cloud Functions, Firebase enables serverless application architectures. - Real-time Applications: Firebase\'s Realtime Database is particularly useful for apps requiring live data synchronization. - MVP Development: Firebase\'s suite of tools allows for rapid development of minimum viable products. While Firebase offers many advantages, it\'s worth noting some considerations: - Vendor Lock-in: Heavy reliance on Firebase can make it challenging to migrate to other platforms later. - Pricing: While Firebase has a generous free tier, costs can escalate quickly for high-traffic applications. - Limited Query Capabilities: Firestore and Realtime Database have some limitations in complex querying compared to traditional SQL databases. - Data Migration: Migrating existing data into Firebase can be challenging, especially for complex data structures. Firebase is a proprietary service offered by Google. It can be used with various platforms including iOS, Android, Web, Unity, and C++. Many popular frameworks and libraries have Firebase integration support. For developers, particularly those focused on mobile and web application development, proficiency in Firebase can be a valuable skill. As the demand for rapid application development and real-time features continues to grow, platforms like Firebase that provide comprehensive backend services and real-time capabilities are likely to remain important in the app development ecosystem.',
		logo: Assets.Firebase,
		name: 'Firebase',
		category: 'devtools'
	}),
	defineSkill({
		slug: 'docker',
		color: 'blue',
		description: 'Docker is an open-source platform designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. First released in 2013, Docker has since become a cornerstone of modern software development and deployment practices. Key features of Docker include: 1) Containerization: Docker packages an application and its dependencies together in a container, ensuring that the application works seamlessly in any environment. 2) Portability: Docker containers can run on any machine that has Docker installed, regardless of the underlying operating system. 3) Lightweight: Containers share the host system\'s kernel, making them much more lightweight than traditional virtual machines. 4) Version Control: Docker includes built-in version control systems, allowing you to track changes to your container images. 5) Docker Hub: A cloud-based registry service for sharing and managing container images. 6) Isolation: Each container runs in isolation from others, enhancing security and reducing conflicts. 7) Scalability: Docker makes it easy to scale applications by spinning up new containers as needed. 8) Docker Compose: A tool for defining and running multi-container Docker applications. 9) Docker Swarm: Docker\'s native clustering and scheduling tool for Docker containers. 10) Efficient Updates: Docker allows for efficient updates and maintenance as only the necessary changes need to be deployed. 11) Resource Efficiency: Docker allows for better utilization of system resources compared to traditional virtualization. 12) Rapid Deployment: Containers can be created and destroyed quickly, allowing for rapid application deployment and scaling. Docker is used in various scenarios: - Microservices Architecture: Docker is often used to containerize individual microservices. - Continuous Integration/Continuous Deployment (CI/CD): Docker containers are frequently used in CI/CD pipelines. - Development Environments: Docker can create consistent development environments across a team. - Application Isolation: Docker can isolate applications and their dependencies from the host system and from each other. - Cloud Migration: Docker can facilitate the migration of applications to cloud platforms. While Docker offers many advantages, it\'s worth noting some considerations: - Learning Curve: While Docker simplifies many aspects of deployment, it does require learning new concepts and tools. - Security: While Docker provides isolation, container security requires careful configuration and management. - Persistent Data: Managing persistent data in Docker can be challenging and requires careful design. - Performance Overhead: While minimal, there is some performance overhead associated with containerization. Docker is open-source and available under the Apache 2.0 license. It runs on various Linux distributions, as well as Windows and macOS (via a lightweight VM). For developers, system administrators, and DevOps professionals, proficiency in Docker is often considered an essential skill. As applications continue to grow in complexity and the need for flexible, scalable deployment solutions increases, tools like Docker that facilitate containerization and microservices architectures are likely to remain crucial in the software development and deployment ecosystem.',
		logo: Assets.Docker,
		name: 'Docker',
		category: 'devops'
	}),
	defineSkill({
		slug: 'dart',
		color: 'blue',
		description: 'Dart is a client-optimized programming language for fast apps on multiple platforms. It is developed by Google and is used to build mobile, desktop, server, and web applications. Dart was first announced in 2011 and has gained significant popularity, especially with the rise of Flutter, Google\'s UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase. Key features of Dart include: 1) Object-Oriented: Dart is a class-based, object-oriented language with C-style syntax. 2) Strongly Typed: Dart is strongly typed, but also has type inference, allowing for more concise code. 3) Garbage Collection: Dart uses garbage collection to reclaim unused memory. 4) Isolates: For concurrent programming, Dart uses isolates instead of threads. 5) JIT and AOT Compilation: Dart supports both Just-In-Time (JIT) compilation for fast development cycles and Ahead-Of-Time (AOT) compilation for fast startup and execution. 6) Null Safety: Dart has sound null safety, helping developers avoid null reference errors. 7) Async-Await: Dart has built-in support for asynchronous programming using async and await keywords. 8) Mixins: Dart supports mixins, allowing for more flexible code reuse than single inheritance alone. 9) Extension Methods: Allows adding functionality to existing libraries. 10) Spread Operator: Dart includes the spread operator for easier list and map manipulation. 11) Dart DevTools: A suite of debugging and performance tools. 12) Easy to Learn: Dart is designed to be familiar to developers coming from other object-oriented languages like Java or C#. Dart is used in various scenarios: - Flutter Development: Dart is the language used for developing Flutter applications. - Web Development: Dart can be used for web development, either compiled to JavaScript or run on the server. - Server-Side Development: Dart can be used for creating server-side applications. - Command-Line Applications: Dart can be used to create command-line applications. While Dart offers many advantages, it\'s worth noting some considerations: - Ecosystem: While growing, Dart\'s ecosystem is not as extensive as some more established languages. - Learning Curve: While designed to be easy to learn, developers still need to invest time in learning Dart\'s specific features and idioms. - Limited Use Outside Flutter: While Dart can be used for various types of development, it\'s most commonly used with Flutter. Dart is open-source and free to use. It\'s developed by Google and is available under a BSD license. Dart can be run on various platforms including Windows, macOS, and Linux. For developers, particularly those interested in cross-platform mobile development with Flutter, proficiency in Dart is essential. As the demand for efficient cross-platform development solutions continues to grow, languages like Dart that enable developers to create fast, efficient applications for multiple platforms from a single codebase are likely to remain important in the software development ecosystem.',
		logo: Assets.Dart,
		name: 'Dart',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'bootstrap',
		color: 'purple',
		description: 'Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS and JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components. Originally created by Twitter developers Mark Otto and Jacob Thornton, Bootstrap has become one of the most popular front-end frameworks and open source projects in the world. Key features of Bootstrap include: 1) Responsive Grid System: Bootstrap includes a powerful mobile-first flexbox grid system for building layouts of all shapes and sizes. 2) Extensive Prebuilt Components: It provides a large collection of commonly used interface components like navbars, dropdowns, alerts, and modals. 3) JavaScript Plugins: Bootstrap comes with several JavaScript plugins that can be included as-needed. 4) Customization: While Bootstrap provides a solid foundation, it\'s designed to be customized to fit your project\'s needs. 5) Sass Variables and Mixins: For projects that use Sass, Bootstrap provides variables and mixins to make customization even easier. 6) Responsive Breakpoints: Bootstrap includes a set of responsive breakpoints that make it easy to create responsive designs. 7) Utility Classes: It provides a wide range of utility classes for quickly styling elements without having to write custom CSS. 8) Normalize.css: Bootstrap includes Normalize.css to ensure consistent rendering across different browsers. 9) Icon Library: While not included directly in Bootstrap 5, it recommends and provides guidance for using various icon libraries. 10) Extensive Documentation: Bootstrap provides comprehensive documentation with examples and explanations. 11) Browser Support: Bootstrap supports all major browsers and platforms. 12) Community and Ecosystem: There\'s a large community around Bootstrap, resulting in numerous third-party themes, extensions, and tools. Bootstrap is used in various scenarios: - Rapid Prototyping: Its pre-built components make it easy to quickly create prototypes. - Responsive Web Design: Bootstrap\'s grid system and responsive utilities facilitate creating responsive layouts. - Consistent UI: It helps maintain consistency in user interfaces across projects. - Cross-Browser Compatibility: Bootstrap helps ensure that designs work across different browsers. While Bootstrap offers many advantages, it\'s worth noting some considerations: - Learning Curve: While designed to be easy to use, there is still a learning curve, especially for customization. - Opinionated Design: Bootstrap has its own distinct look, which, if not customized, can make sites look similar. - File Size: If not optimized, including all of Bootstrap can increase the file size of your project. - Reliance on jQuery: While Bootstrap 5 has removed the jQuery dependency, many Bootstrap-based projects and third-party extensions still rely on it. Bootstrap is open-source and available under the MIT license. It can be included in projects via CDN or downloaded and included directly. It\'s also available as a npm package for use with build tools. For front-end developers, particularly those working on projects where rapid development and responsiveness are key, proficiency in Bootstrap can be a valuable skill. As the need for responsive, mobile-first web design continues to grow, frameworks like Bootstrap that provide a solid foundation for creating responsive layouts and interfaces are likely to remain important in the web development ecosystem.',
		logo: Assets.Bootstrap,
		name: 'Bootstrap',
		category: 'markup-style'
	}),
	defineSkill({
		slug: 'delphi',
		color: 'red',
		description: 'Delphi is an integrated development environment (IDE) for rapid application development of desktop, mobile, web, and console software, developed by Embarcadero Technologies. Delphi uses the Object Pascal programming language, which is a modern evolution of the original Pascal language developed in the late 1960s. First released in 1995, Delphi has since become known for its fast compilation speed, native code performance, and extensive component libraries. Key features of Delphi include: 1) Rapid Application Development (RAD): Delphi\'s visual development environment allows for quick creation of user interfaces and application logic. 2) Cross-Platform Development: Modern versions of Delphi support development for Windows, macOS, iOS, Android, and Linux from a single codebase. 3) Native Compilation: Delphi compiles to native machine code, resulting in fast, efficient applications. 4) Extensive Component Library: Delphi comes with a large library of reusable components for various purposes. 5) Database Support: It includes robust database access components and drivers for various database systems. 6) Visual Component Library (VCL): A comprehensive framework for Windows development. 7) FireMonkey (FMX): A framework for cross-platform development. 8) COM/ActiveX Support: Delphi has strong support for Microsoft\'s COM technology. 9) SOAP/XML Support: For web service development and XML processing. 10) Inline Assembly: Allows mixing of assembly language with Object Pascal for performance-critical code. 11) Unicode Support: Full Unicode support for developing multilingual applications. 12) Integrated Debugging: Powerful debugging tools are built into the IDE. Delphi is used in various scenarios: - Desktop Application Development: Particularly for Windows, Delphi has been a popular choice for creating desktop applications. - Database Applications: Its strong database support makes it suitable for database-driven applications. - Enterprise Software: Many large-scale enterprise applications have been developed with Delphi. - Cross-Platform Mobile Development: With FireMonkey, Delphi can be used to create mobile apps for iOS and Android. While Delphi offers many advantages, it\'s worth noting some considerations: - Learning Curve: While designed for rapid development, mastering Delphi and Object Pascal requires time and effort. - Cost: Unlike many modern development tools, Delphi is not free or open-source, which can be a barrier for some developers or organizations. - Community Size: While still active, the Delphi community is smaller compared to some more popular languages and frameworks. Delphi is a commercial product offered by Embarcadero Technologies. It\'s available in several editions, including a free Community Edition for individual developers, startups, and small businesses. For developers, particularly those working on Windows desktop applications or cross-platform development with a single codebase, proficiency in Delphi can be a valuable skill. While not as widely used as some newer technologies, Delphi continues to have a dedicated user base, especially in certain industries and for maintaining legacy applications.',
		logo: Assets.Delphi,
		name: 'Delphi',
		category: 'pro-lang'
	}),
	defineSkill({
		slug: 'xamarin',
		color: 'blue',
		description: 'Xamarin is a cross-platform mobile app development framework owned by Microsoft. It allows developers to use C# and .NET to create native Android, iOS, and Windows apps. Xamarin enables shared code across platforms while still allowing access to native APIs and performance. Key features include: 1) Code Sharing: Up to 90% of code can be shared across platforms. 2) Native Performance: Xamarin apps compile to native code for each platform. 3) Access to Native APIs: Full access to platform-specific functionality. 4) Xamarin.Forms: For rapid UI development across platforms. 5) Visual Studio Integration: Seamless integration with Microsoft\'s IDE. 6) Xamarin Test Cloud: For automated UI testing on real devices. While powerful, Xamarin has a learning curve and can have larger app sizes compared to fully native development.',
		logo: Assets.Xamarin,
		name: 'Xamarin',
		category: 'mobile'
	}),
	defineSkill({
		slug: 'vite',
		color: 'purple',
		description: 'Vite is a build tool that aims to provide a faster and leaner development experience for modern web projects. Created by Evan You, the creator of Vue.js, Vite leverages native ES modules in the browser to enable extremely fast hot module replacement (HMR) and no-bundle development server startup. Key features include: 1) Lightning Fast HMR: Updates are reflected instantly in the browser. 2) Pre-bundling: Uses esbuild for super-fast dependency pre-bundling. 3) Optimized Build: Uses Rollup for optimized production builds. 4) Universal Plugin Interface: Plugins work for both dev and build. 5) TypeScript Support: First-class TypeScript support out of the box. 6) CSS Support: Supports CSS pre-processors and CSS modules. Vite is framework-agnostic but provides first-class Vue.js support. It\'s particularly suited for modern, ES module-based projects.',
		logo: Assets.Vite,
		name: 'Vite',
		category: 'devtools'
	}),
	defineSkill({
		slug: 'unocss',
		color: 'gray',
		description: 'UnoCSS is an atomic CSS engine that takes a unique approach to styling. Unlike traditional CSS frameworks, UnoCSS generates utility classes on-demand based on your usage. Key features include: 1) Instant: No parsing, AST, or selector computation at runtime. 2) Fully Customizable: All features can be extended or disabled. 3) Attributify Mode: Group utilities in attributes for cleaner markup. 4) Pure CSS Icons: Use any icon as a single class. 5) Variant Groups: Apply utilities for multiple variants easily. 6) CSS Scoping: Built-in CSS scoping solution. 7) Web Fonts: Auto-detects and inlines web fonts. UnoCSS is highly flexible and can be configured to behave like other utility-first CSS frameworks. It\'s particularly useful for projects where performance and customization are crucial.',
		logo: Assets.Unocss,
		name: 'UnoCSS',
		category: 'markup-style'
	}),
	defineSkill({
		slug: 'tailwind',
		color: 'blue',
		description: 'Tailwind CSS is a utility-first CSS framework for rapidly building custom user interfaces. Unlike traditional frameworks that provide pre-designed components, Tailwind offers low-level utility classes that let you build completely custom designs. Key features include: 1) Utility-First: Compose designs directly in your markup. 2) Responsive Design: Built-in responsive modifiers. 3) Hover and Focus States: Easy styling for interactive elements. 4) Customization: Highly customizable through configuration. 5) Dark Mode: Built-in dark mode support. 6) JIT Mode: Just-in-Time mode for on-demand CSS generation. 7) Plugins: Extensible through a plugin system. Tailwind is particularly popular for its flexibility and the speed at which it allows developers to create custom designs without writing custom CSS.',
		logo: Assets.Tailwind,
		name: 'Tailwind CSS',
		category: 'markup-style'
	}),
	defineSkill({
		slug: 'solid',
		color: 'blue',
		description: 'Solid is a declarative JavaScript library for creating user interfaces. It stands out for its performance and its unique approach to reactivity. Key features include: 1) Fine-Grained Reactivity: Updates only what needs to be updated. 2) No Virtual DOM: Compiles templates to real DOM operations. 3) Small Size: Tiny core library with no dependencies. 4) JSX: Uses JSX for templating. 5) Server-Side Rendering: Built-in SSR support. 6) Suspense: For declarative data fetching. 7) Stores: Simple but powerful state management. Solid is particularly suited for applications where performance is critical. Its approach to reactivity can lead to extremely efficient updates.',
		logo: Assets.Solid,
		name: 'Solid.js',
		category: 'framework'
	})
] as const;

export const title = 'Skills';

export const getSkills = (
	...slugs: Array<StringWithAutoComplete<(typeof items)[number]['slug']>>
): Array<Skill> => items.filter((it) => slugs.includes(it.slug));

export const groupByCategory = (
	query: string
): Array<{ category: SkillCategory; items: Array<Skill> }> => {
	const out: ReturnType<typeof groupByCategory> = [];

	const others: Array<Skill> = [];

	items.forEach((item) => {
		if (query.trim() && !item.name.toLowerCase().includes(query.trim().toLowerCase())) return;

		// push to others if item does not have a category
		if (!item.category) {
			others.push(item);
			return;
		}

		// check if category exists
		let category = out.find((it) => it.category.slug === item.category?.slug);

		if (!category) {
			category = { items: [], category: item.category };

			out.push(category);
		}

		category.items.push(item);
	});

	if (others.length !== 0) {
		out.push({ category: { name: 'Others', slug: 'others' }, items: others });
	}

	return out;
};